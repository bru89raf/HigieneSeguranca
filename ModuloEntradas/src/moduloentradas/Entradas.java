/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduloentradas;

import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Rafael
 */
public class Entradas extends javax.swing.JFrame {

    /* VARIAVEIS PARA A LIGAÇÃO A BASE DE DADOS */
    String url = "jdbc:derby://localhost:1527/entradas";
    Connection con;
    String sql;
    
    DefaultTableModel model;
    
    
    /*  ID DA ENTRADA SELECCIONADA -> JANELA CONSULTA ENTRADAS */

    int idEntradaSeleccionada = 0;
    
    /*  ID'S PARA FAZER DEVOLUÇÃO -> JANELA CONSULTA ENTRDAS - JANELA DEVOLUÇÃO */
    int idFornecedorDevolucao = 0;
    int idMateriaPrimaDevolucao = 0;
    float quantidadeEntradaTotalSelecionada;
    
    /*  CONTA LINHAS - PARA VER SE TEM DADOS INSERIDOS  */
    int CONTA_LINHAS_CONTROLORESULTADOS = 0;
    int CONTA_LINHAS_NAOCONFORMIDADES = 0;
    
    /*  ABRIR OU NAO CONTROLO DE RESULTADOS */
    boolean abrirControloResultados = false;
    
    /*  VARIAVEL PARA GUARDAR FUNCINARIO    */
    int idFuncionarioSelecionadoNaoConformidade = 0;
    int idControloResuladoSeleccionado = 0;
    
    /*  VARIAVEL PARA SABERMOS SE EXISTE OU NAO DEVOLUÇÃO   */
    boolean MateriaPrimaADevolver =  false;
    
    float quantidadeADevolverSelecionada = 0.0f;
    
    float mostraQuantidadeDevolvidaAteAoMomento = 0.0f;
    
    
    /*  VARIAVEL PARA GUARDAR O LOTE    */
    String geraLote = "";
    
    /*  VARIVAL PARA GUARDAR O LOTE PESQUISADO  */
    String LoteOriginalSeleccionado = "";
   
    /*  MOSTRAR FICHA DETALHADA DE UMA DEVOLUÇÃO    */
    int idDevolucaoSeleccionado = 0;
        //pesquisa
    int idForncedorPesquisaDevolucao = 0;
    int idMateriaPrimaPesquisaDevolucao = 0;
    int devolucaoNumero = 0;
    
    
    /*  VARIVEL PARA CONTAR QUANTOS DADOS TEMOS INSERIDOS NAS DEVOLUÇOES (PESQUISA) */
    
    int CONTA_NUMERO_DEVOLUCOES = 0;

    
    
    public Entradas() {
        initComponents();
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogMenuEntradas = new javax.swing.JDialog();
        jPanelMenuEntradas = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonNovaEntrada = new javax.swing.JButton();
        jButtonConsultaEntradas = new javax.swing.JButton();
        jButtonNovaMateriaPrima = new javax.swing.JButton();
        jButtonNovoForncedor = new javax.swing.JButton();
        jButtonConsultaDevolucoes = new javax.swing.JButton();
        jDialogNovaEntrada = new javax.swing.JDialog();
        jPanelNovaEntrada = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxFornecedorEntrada = new javax.swing.JComboBox();
        jDateChooserEntrada = new com.toedter.calendar.JDateChooser();
        jTextFieldLoteEntrada = new javax.swing.JTextField();
        jTextFieldQuantidadeEntrada = new javax.swing.JTextField();
        jComboBoxFuncionarioResponsavelEntrada = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jComboBoxMateriaPrimaEntrada = new javax.swing.JComboBox();
        jPanelBotoesNovaEntrada = new javax.swing.JPanel();
        jButtonGuardarNovaEntrada = new javax.swing.JButton();
        jButtonSairNovaEntrada = new javax.swing.JButton();
        jButtonDesvloquearPanel = new javax.swing.JButton();
        jPanelADevolverNovaEntrada = new javax.swing.JPanel();
        jTextFieldQuantidadeADevolver = new javax.swing.JTextField();
        jLabelQuantidadeADevolver = new javax.swing.JLabel();
        jPanelConformidadesNovaEntrada = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxTemperaturaEntrada = new javax.swing.JComboBox();
        jComboBoxDataValidadeEntrada = new javax.swing.JComboBox();
        jComboBoxCaraOrgonolepticasEntradas = new javax.swing.JComboBox();
        jComboBoxEmbalagemEntradas = new javax.swing.JComboBox();
        jDialogNovaMateriaPrima = new javax.swing.JDialog();
        jPanelNovaMateriaPrima = new javax.swing.JPanel();
        jLabelNomeMateriaPrima = new javax.swing.JLabel();
        jLabelDescricaoMateriaPrima = new javax.swing.JLabel();
        jLabelUnidadeMateriaPrima = new javax.swing.JLabel();
        jTextFieldNomeMateriaPrima = new javax.swing.JTextField();
        jScrollPaneDescricaoMateriaPrima = new javax.swing.JScrollPane();
        jTextAreaDescricaoMateriaPrima = new javax.swing.JTextArea();
        jTextFieldUnidadeMateriaPrima = new javax.swing.JTextField();
        jButtonGuardarMateriaPrima = new javax.swing.JButton();
        jButtonSairMateriaPrima = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jDialogNovoFornecedor = new javax.swing.JDialog();
        jPanelNovoFornecedor = new javax.swing.JPanel();
        jLabelNomeFornecedor = new javax.swing.JLabel();
        jLabelMoradaFornecedor = new javax.swing.JLabel();
        jLabelCodPostalFornecedor = new javax.swing.JLabel();
        jLabelLocalidadeForncedor = new javax.swing.JLabel();
        jLabelContactoForncedor = new javax.swing.JLabel();
        jLabelEmailFornecedor = new javax.swing.JLabel();
        jLabelNIFFornecedor = new javax.swing.JLabel();
        jLabelTipoProduto = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldNomeFornecedor = new javax.swing.JTextField();
        jTextFieldMoradaFornecedor = new javax.swing.JTextField();
        jTextFieldCodPostalFornecedor = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter cpf= new javax.swing.text.MaskFormatter("####-###");
            jTextFieldCodPostalFornecedor = new javax.swing.JFormattedTextField(cpf);
        }catch (Exception e){}
        jTextFieldLocalidadeFornecedor = new javax.swing.JTextField();
        jTextFieldContactoFornecedor = new javax.swing.JTextField();
        jTextFieldEmailFornecedor = new javax.swing.JTextField();
        jTextFieldNIFFornecedor = new javax.swing.JTextField();
        jTextFieldTipoProdutoFornecedor = new javax.swing.JTextField();
        jButtonGuardarNovoFornecedor = new javax.swing.JButton();
        jButtonSairNovoFornecedor = new javax.swing.JButton();
        jLabelNovoFornecedor = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jDialogDevolucoes = new javax.swing.JDialog();
        jPanelDevolucoes = new javax.swing.JPanel();
        jLabelFuncionarioResponsavel = new javax.swing.JLabel();
        jLabelDataDevolucao = new javax.swing.JLabel();
        jLabelQuantidadeDevolvida = new javax.swing.JLabel();
        jLabelObservação = new javax.swing.JLabel();
        jComboBoxFuncionarioResponsavelDevolucao = new javax.swing.JComboBox();
        jDateChooserDataDevolucao = new com.toedter.calendar.JDateChooser();
        jTextFieldQuantidadeDevolucao = new javax.swing.JTextField();
        jScrollPaneObservacoesDevolucao = new javax.swing.JScrollPane();
        jTextAreaObservacoesDevolucao = new javax.swing.JTextArea();
        jButtonGuardaDevolucao = new javax.swing.JButton();
        jButtonSairDevolucao = new javax.swing.JButton();
        jLabelQuantidadeADevolverDevolucao = new javax.swing.JLabel();
        jTextFieldQuantidadeADevolverDevolucao = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jDialogConsultaEntradas = new javax.swing.JDialog();
        jPanelConsultaEntradas = new javax.swing.JPanel();
        jButtonConsultaEntradasSair = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableConsultaEntradas = new javax.swing.JTable();
        jButtonVerDevolucoes = new javax.swing.JButton();
        jButtonDevolucao = new javax.swing.JButton();
        jLabelPesquisar = new javax.swing.JLabel();
        jTextFieldPesquisarEntrada = new javax.swing.JTextField();
        jButtonVerControloResultados = new javax.swing.JButton();
        jButtonVerLoteTotal = new javax.swing.JButton();
        jLabelTituloConsultaEntradas = new javax.swing.JLabel();
        jDialogConsultaControloResultadosEntradas = new javax.swing.JDialog();
        jPanelConsultaControloResultadosEntradas = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConsultaControloResultadosEntradas = new javax.swing.JTable();
        jButtonVerNaoConformidadesEntradas = new javax.swing.JButton();
        jButtonConsutaControloResultadosEntradasSair = new javax.swing.JButton();
        jButtonVerFichaCompletaControloResultados = new javax.swing.JButton();
        jDialogConsultaNaoConformidadesEntradas = new javax.swing.JDialog();
        jPanelConsultaNaoConformidadesEntradas = new javax.swing.JPanel();
        jScrollPaneConsultaNaoConformidades = new javax.swing.JScrollPane();
        jTableConsultaNaoConformidadesEntradas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jDialogConsultaDevolucoes = new javax.swing.JDialog();
        jPanelConsultaDevolucoes = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableConsultaDevolucoes = new javax.swing.JTable();
        jButtonConsultaDevolucoesSair = new javax.swing.JButton();
        jButtonVerFichaDetalhadaConsultaDevolucoes = new javax.swing.JButton();
        jComboBoxFornecedorDevolucoes = new javax.swing.JComboBox();
        jComboBoxMateriaPrimaDevolucoes = new javax.swing.JComboBox();
        jLabelFornecedorDevolucoes = new javax.swing.JLabel();
        jLabelMateriaPrimaDevolucoes = new javax.swing.JLabel();
        jButtonVerTodasAsDevolucoes = new javax.swing.JButton();
        jButtonEntrar = new javax.swing.JButton();

        jDialogMenuEntradas.setTitle("MENU ENTRADAS");
        jDialogMenuEntradas.setFocusCycleRoot(false);
        jDialogMenuEntradas.setMinimumSize(new java.awt.Dimension(420, 285));

        jLabel1.setText("MENU ENTRADAS");

        jButtonNovaEntrada.setText("Nova Entrada");
        jButtonNovaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaEntradaActionPerformed(evt);
            }
        });

        jButtonConsultaEntradas.setText("Consultar Entradas");
        jButtonConsultaEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaEntradasActionPerformed(evt);
            }
        });

        jButtonNovaMateriaPrima.setText("Nova Materia-Prima");
        jButtonNovaMateriaPrima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaMateriaPrimaActionPerformed(evt);
            }
        });

        jButtonNovoForncedor.setText("Novo Forncedor");
        jButtonNovoForncedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoForncedorActionPerformed(evt);
            }
        });

        jButtonConsultaDevolucoes.setText("Consultar Devoluçõoes");
        jButtonConsultaDevolucoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaDevolucoesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuEntradasLayout = new javax.swing.GroupLayout(jPanelMenuEntradas);
        jPanelMenuEntradas.setLayout(jPanelMenuEntradasLayout);
        jPanelMenuEntradasLayout.setHorizontalGroup(
            jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonNovaEntrada)
                    .addComponent(jButtonNovaMateriaPrima))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonConsultaDevolucoes)
                    .addComponent(jButtonConsultaEntradas))
                .addGap(49, 49, 49))
            .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                .addGroup(jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonNovoForncedor))
                    .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMenuEntradasLayout.setVerticalGroup(
            jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovaEntrada)
                    .addComponent(jButtonConsultaEntradas))
                .addGap(18, 18, 18)
                .addGroup(jPanelMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMenuEntradasLayout.createSequentialGroup()
                        .addComponent(jButtonConsultaDevolucoes)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMenuEntradasLayout.createSequentialGroup()
                        .addComponent(jButtonNovaMateriaPrima)
                        .addGap(18, 18, 18)))
                .addComponent(jButtonNovoForncedor)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogMenuEntradasLayout = new javax.swing.GroupLayout(jDialogMenuEntradas.getContentPane());
        jDialogMenuEntradas.getContentPane().setLayout(jDialogMenuEntradasLayout);
        jDialogMenuEntradasLayout.setHorizontalGroup(
            jDialogMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMenuEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jDialogMenuEntradasLayout.setVerticalGroup(
            jDialogMenuEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMenuEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jDialogNovaEntrada.setTitle("NOVA ENTRADA");
        jDialogNovaEntrada.setMinimumSize(new java.awt.Dimension(620, 500));

        jLabel2.setText("Fornecedor");

        jLabel3.setText("Funcionario Responsavel");

        jLabel4.setText("Data Entrega");

        jLabel5.setText("Lote Origem");

        jLabel6.setText("Quantidade");

        jComboBoxFornecedorEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jDateChooserEntrada.setDateFormatString("yyyy-MM-dd");

        jTextFieldLoteEntrada.setEditable(false);

        jComboBoxFuncionarioResponsavelEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel12.setText("Materia Prima");

        jComboBoxMateriaPrimaEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanelNovaEntradaLayout = new javax.swing.GroupLayout(jPanelNovaEntrada);
        jPanelNovaEntrada.setLayout(jPanelNovaEntradaLayout);
        jPanelNovaEntradaLayout.setHorizontalGroup(
            jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelNovaEntradaLayout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooserEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                        .addGroup(jPanelNovaEntradaLayout.createSequentialGroup()
                            .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldLoteEntrada)
                                .addComponent(jTextFieldQuantidadeEntrada)))
                        .addGroup(jPanelNovaEntradaLayout.createSequentialGroup()
                            .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel12))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxFuncionarioResponsavelEntrada, 0, 161, Short.MAX_VALUE)
                                .addComponent(jComboBoxFornecedorEntrada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxMateriaPrimaEntrada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelNovaEntradaLayout.setVerticalGroup(
            jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jComboBoxFuncionarioResponsavelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxFornecedorEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jComboBoxMateriaPrimaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jDateChooserEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldLoteEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanelNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldQuantidadeEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        jButtonGuardarNovaEntrada.setText("Guardar");
        jButtonGuardarNovaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarNovaEntradaActionPerformed(evt);
            }
        });

        jButtonSairNovaEntrada.setText("Voltar");
        jButtonSairNovaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairNovaEntradaActionPerformed(evt);
            }
        });

        jButtonDesvloquearPanel.setText("Desbloquear");
        jButtonDesvloquearPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesvloquearPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotoesNovaEntradaLayout = new javax.swing.GroupLayout(jPanelBotoesNovaEntrada);
        jPanelBotoesNovaEntrada.setLayout(jPanelBotoesNovaEntradaLayout);
        jPanelBotoesNovaEntradaLayout.setHorizontalGroup(
            jPanelBotoesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesNovaEntradaLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButtonGuardarNovaEntrada)
                .addGap(18, 18, 18)
                .addComponent(jButtonSairNovaEntrada)
                .addGap(18, 18, 18)
                .addComponent(jButtonDesvloquearPanel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBotoesNovaEntradaLayout.setVerticalGroup(
            jPanelBotoesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesNovaEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBotoesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardarNovaEntrada)
                    .addComponent(jButtonSairNovaEntrada)
                    .addComponent(jButtonDesvloquearPanel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelADevolverNovaEntrada.setBorder(javax.swing.BorderFactory.createTitledBorder("A Devolver"));

        jLabelQuantidadeADevolver.setText("Quantidade a Devolver ?");

        javax.swing.GroupLayout jPanelADevolverNovaEntradaLayout = new javax.swing.GroupLayout(jPanelADevolverNovaEntrada);
        jPanelADevolverNovaEntrada.setLayout(jPanelADevolverNovaEntradaLayout);
        jPanelADevolverNovaEntradaLayout.setHorizontalGroup(
            jPanelADevolverNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelADevolverNovaEntradaLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabelQuantidadeADevolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelADevolverNovaEntradaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldQuantidadeADevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelADevolverNovaEntradaLayout.setVerticalGroup(
            jPanelADevolverNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelADevolverNovaEntradaLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabelQuantidadeADevolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldQuantidadeADevolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanelConformidadesNovaEntrada.setBorder(javax.swing.BorderFactory.createTitledBorder("Conformidades"));

        jLabel7.setText("Temperatura");

        jLabel8.setText("Data Validade");

        jLabel9.setText("Caract. Orgonolepticas");

        jLabel10.setText("Embalagem/Transporte");

        jComboBoxTemperaturaEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Opção--", "C", "NC" }));

        jComboBoxDataValidadeEntrada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Opção--", "C", "NC" }));

        jComboBoxCaraOrgonolepticasEntradas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Opção--", "C", "NC" }));

        jComboBoxEmbalagemEntradas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Opção--", "C", "NC" }));

        javax.swing.GroupLayout jPanelConformidadesNovaEntradaLayout = new javax.swing.GroupLayout(jPanelConformidadesNovaEntrada);
        jPanelConformidadesNovaEntrada.setLayout(jPanelConformidadesNovaEntradaLayout);
        jPanelConformidadesNovaEntradaLayout.setHorizontalGroup(
            jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConformidadesNovaEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(26, 26, 26)
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxTemperaturaEntrada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxDataValidadeEntrada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxCaraOrgonolepticasEntradas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxEmbalagemEntradas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelConformidadesNovaEntradaLayout.setVerticalGroup(
            jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConformidadesNovaEntradaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jComboBoxTemperaturaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jComboBoxDataValidadeEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBoxCaraOrgonolepticasEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelConformidadesNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBoxEmbalagemEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogNovaEntradaLayout = new javax.swing.GroupLayout(jDialogNovaEntrada.getContentPane());
        jDialogNovaEntrada.getContentPane().setLayout(jDialogNovaEntradaLayout);
        jDialogNovaEntradaLayout.setHorizontalGroup(
            jDialogNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaEntradaLayout.createSequentialGroup()
                .addGroup(jDialogNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogNovaEntradaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialogNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelConformidadesNovaEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelADevolverNovaEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jDialogNovaEntradaLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jPanelBotoesNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jDialogNovaEntradaLayout.setVerticalGroup(
            jDialogNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaEntradaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogNovaEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialogNovaEntradaLayout.createSequentialGroup()
                        .addComponent(jPanelConformidadesNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelADevolverNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addComponent(jPanelNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelBotoesNovaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialogNovaMateriaPrima.setTitle("NOVA MAT. PRIMA");
        jDialogNovaMateriaPrima.setMinimumSize(new java.awt.Dimension(352, 400));

        jLabelNomeMateriaPrima.setText("Nome");

        jLabelDescricaoMateriaPrima.setText("Descricao");

        jLabelUnidadeMateriaPrima.setText("Unidade");

        jTextAreaDescricaoMateriaPrima.setColumns(20);
        jTextAreaDescricaoMateriaPrima.setLineWrap(true);
        jTextAreaDescricaoMateriaPrima.setRows(4);
        jTextAreaDescricaoMateriaPrima.setMinimumSize(new java.awt.Dimension(4, 15));
        jTextAreaDescricaoMateriaPrima.setPreferredSize(new java.awt.Dimension(150, 94));
        jScrollPaneDescricaoMateriaPrima.setViewportView(jTextAreaDescricaoMateriaPrima);

        jButtonGuardarMateriaPrima.setText("Guardar");
        jButtonGuardarMateriaPrima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarMateriaPrimaActionPerformed(evt);
            }
        });

        jButtonSairMateriaPrima.setText("Voltar");
        jButtonSairMateriaPrima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairMateriaPrimaActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Nova Materia Prima");

        javax.swing.GroupLayout jPanelNovaMateriaPrimaLayout = new javax.swing.GroupLayout(jPanelNovaMateriaPrima);
        jPanelNovaMateriaPrima.setLayout(jPanelNovaMateriaPrimaLayout);
        jPanelNovaMateriaPrimaLayout.setHorizontalGroup(
            jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDescricaoMateriaPrima)
                    .addGroup(jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPaneDescricaoMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonGuardarMateriaPrima)
                            .addGap(41, 41, 41)
                            .addComponent(jButtonSairMateriaPrima))
                        .addGroup(jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                            .addComponent(jLabelUnidadeMateriaPrima)
                            .addGap(18, 18, 18)
                            .addComponent(jTextFieldUnidadeMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                        .addComponent(jLabelNomeMateriaPrima)
                        .addGap(29, 29, 29)
                        .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNomeMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(56, 56, 56)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelNovaMateriaPrimaLayout.setVerticalGroup(
            jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaMateriaPrimaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(13, 13, 13)
                .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeMateriaPrima)
                    .addComponent(jTextFieldNomeMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabelDescricaoMateriaPrima)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneDescricaoMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUnidadeMateriaPrima)
                    .addComponent(jTextFieldUnidadeMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardarMateriaPrima)
                    .addComponent(jButtonSairMateriaPrima))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout jDialogNovaMateriaPrimaLayout = new javax.swing.GroupLayout(jDialogNovaMateriaPrima.getContentPane());
        jDialogNovaMateriaPrima.getContentPane().setLayout(jDialogNovaMateriaPrimaLayout);
        jDialogNovaMateriaPrimaLayout.setHorizontalGroup(
            jDialogNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaMateriaPrimaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovaMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jDialogNovaMateriaPrimaLayout.setVerticalGroup(
            jDialogNovaMateriaPrimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaMateriaPrimaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovaMateriaPrima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jDialogNovoFornecedor.setTitle("Novo Forncedor");
        jDialogNovoFornecedor.setMinimumSize(new java.awt.Dimension(330, 630));

        jLabelNomeFornecedor.setText("Nome");

        jLabelMoradaFornecedor.setText("Morada");

        jLabelCodPostalFornecedor.setText("Codigo Postal");

        jLabelLocalidadeForncedor.setText("Localidade");

        jLabelContactoForncedor.setText("Contacto");

        jLabelEmailFornecedor.setText("Email");

        jLabelNIFFornecedor.setText("NIF");

        jLabelTipoProduto.setText("Tipo Produto");

        jLabel11.setText("Ficha Tecnica");

        jTextFieldCodPostalFornecedor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldCodPostalFornecedorCaretUpdate(evt);
            }
        });
        jTextFieldCodPostalFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodPostalFornecedorActionPerformed(evt);
            }
        });

        jTextFieldTipoProdutoFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTipoProdutoFornecedorActionPerformed(evt);
            }
        });

        jButtonGuardarNovoFornecedor.setText("Guardar");
        jButtonGuardarNovoFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarNovoFornecedorActionPerformed(evt);
            }
        });

        jButtonSairNovoFornecedor.setText("Voltar");
        jButtonSairNovoFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairNovoFornecedorActionPerformed(evt);
            }
        });

        jLabelNovoFornecedor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelNovoFornecedor.setText("Novo Fornecedor");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 51));
        jLabel15.setText("*");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 0, 51));
        jLabel16.setText("*");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 0, 51));
        jLabel17.setText("*");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 0, 51));
        jLabel18.setText("*");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 0, 51));
        jLabel19.setText("*");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 0, 51));
        jLabel20.setText("*");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 0, 51));
        jLabel21.setText("*");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 0, 51));
        jLabel23.setText("* - Campos Obrigatorios");

        javax.swing.GroupLayout jPanelNovoFornecedorLayout = new javax.swing.GroupLayout(jPanelNovoFornecedor);
        jPanelNovoFornecedor.setLayout(jPanelNovoFornecedorLayout);
        jPanelNovoFornecedorLayout.setHorizontalGroup(
            jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabelNovoFornecedor))
                    .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11)
                                    .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                                        .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelLocalidadeForncedor)
                                            .addComponent(jLabelCodPostalFornecedor)
                                            .addComponent(jLabelContactoForncedor)
                                            .addComponent(jLabelEmailFornecedor)
                                            .addComponent(jLabelNIFFornecedor)
                                            .addComponent(jLabelTipoProduto))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldLocalidadeFornecedor)
                                            .addComponent(jTextFieldContactoFornecedor)
                                            .addComponent(jTextFieldEmailFornecedor)
                                            .addComponent(jTextFieldNIFFornecedor)
                                            .addComponent(jTextFieldTipoProdutoFornecedor)
                                            .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                                                .addComponent(jTextFieldCodPostalFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelNomeFornecedor)
                                            .addComponent(jLabelMoradaFornecedor))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldMoradaFornecedor)
                                            .addComponent(jTextFieldNomeFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButtonGuardarNovoFornecedor)
                                .addGap(36, 36, 36)
                                .addComponent(jButtonSairNovoFornecedor))))
                    .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelNovoFornecedorLayout.setVerticalGroup(
            jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoFornecedorLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabelNovoFornecedor)
                .addGap(29, 29, 29)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeFornecedor)
                    .addComponent(jTextFieldNomeFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMoradaFornecedor)
                    .addComponent(jTextFieldMoradaFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodPostalFornecedor)
                    .addComponent(jTextFieldCodPostalFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLocalidadeForncedor)
                    .addComponent(jTextFieldLocalidadeFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelContactoForncedor)
                    .addComponent(jTextFieldContactoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEmailFornecedor)
                    .addComponent(jTextFieldEmailFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNIFFornecedor)
                    .addComponent(jTextFieldNIFFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTipoProduto)
                    .addComponent(jTextFieldTipoProdutoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGap(26, 26, 26)
                .addGroup(jPanelNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardarNovoFornecedor)
                    .addComponent(jButtonSairNovoFornecedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel23)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogNovoFornecedorLayout = new javax.swing.GroupLayout(jDialogNovoFornecedor.getContentPane());
        jDialogNovoFornecedor.getContentPane().setLayout(jDialogNovoFornecedorLayout);
        jDialogNovoFornecedorLayout.setHorizontalGroup(
            jDialogNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoFornecedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogNovoFornecedorLayout.setVerticalGroup(
            jDialogNovoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoFornecedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jDialogDevolucoes.setTitle("NOVA DEVOLUÇÃO");
        jDialogDevolucoes.setMinimumSize(new java.awt.Dimension(400, 505));

        jPanelDevolucoes.setToolTipText("DEVOLUÇÃO");

        jLabelFuncionarioResponsavel.setText("Funcionario Responsavel");

        jLabelDataDevolucao.setText("Data de Devolução");

        jLabelQuantidadeDevolvida.setText("Quantidade Devolvida");

        jLabelObservação.setText("Observação");

        jComboBoxFuncionarioResponsavelDevolucao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jDateChooserDataDevolucao.setDateFormatString("yyyy-MM-dd");

        jTextAreaObservacoesDevolucao.setColumns(20);
        jTextAreaObservacoesDevolucao.setRows(5);
        jScrollPaneObservacoesDevolucao.setViewportView(jTextAreaObservacoesDevolucao);

        jButtonGuardaDevolucao.setText("Guardar");
        jButtonGuardaDevolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardaDevolucaoActionPerformed(evt);
            }
        });

        jButtonSairDevolucao.setText("Voltar");
        jButtonSairDevolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairDevolucaoActionPerformed(evt);
            }
        });

        jLabelQuantidadeADevolverDevolucao.setText("Quantidade que Falta");

        jTextFieldQuantidadeADevolverDevolucao.setEditable(false);
        jTextFieldQuantidadeADevolverDevolucao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldQuantidadeADevolverDevolucao.setForeground(new java.awt.Color(255, 0, 0));

        jLabel22.setText("Devolver");

        javax.swing.GroupLayout jPanelDevolucoesLayout = new javax.swing.GroupLayout(jPanelDevolucoes);
        jPanelDevolucoes.setLayout(jPanelDevolucoesLayout);
        jPanelDevolucoesLayout.setHorizontalGroup(
            jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                        .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelObservação)
                            .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelFuncionarioResponsavel)
                                .addComponent(jLabelDataDevolucao, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabelQuantidadeADevolverDevolucao)
                            .addComponent(jLabel22)
                            .addComponent(jLabelQuantidadeDevolvida))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooserDataDevolucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                                        .addComponent(jComboBoxFuncionarioResponsavelDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(233, 233, 233))
                            .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldQuantidadeDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldQuantidadeADevolverDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                                .addComponent(jButtonGuardaDevolucao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSairDevolucao))
                            .addComponent(jScrollPaneObservacoesDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelDevolucoesLayout.setVerticalGroup(
            jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFuncionarioResponsavel)
                    .addComponent(jComboBoxFuncionarioResponsavelDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDataDevolucao)
                    .addComponent(jDateChooserDataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabelQuantidadeADevolverDevolucao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22))
                    .addGroup(jPanelDevolucoesLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jTextFieldQuantidadeADevolverDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelQuantidadeDevolvida)
                    .addComponent(jTextFieldQuantidadeDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabelObservação)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneObservacoesDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardaDevolucao)
                    .addComponent(jButtonSairDevolucao))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogDevolucoesLayout = new javax.swing.GroupLayout(jDialogDevolucoes.getContentPane());
        jDialogDevolucoes.getContentPane().setLayout(jDialogDevolucoesLayout);
        jDialogDevolucoesLayout.setHorizontalGroup(
            jDialogDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogDevolucoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jDialogDevolucoesLayout.setVerticalGroup(
            jDialogDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogDevolucoesLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanelDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jDialogConsultaEntradas.setTitle("CONSULTA ENTRADAS");
        jDialogConsultaEntradas.setMinimumSize(new java.awt.Dimension(1014, 430));

        jButtonConsultaEntradasSair.setText("Voltar");
        jButtonConsultaEntradasSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaEntradasSairActionPerformed(evt);
            }
        });

        jTableConsultaEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionário", "Forncedor", "Matéria Prima", "Data Entrega", "Lote Origem", "Quant. Disponível", "Quant. a Devolver"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableConsultaEntradas);
        if (jTableConsultaEntradas.getColumnModel().getColumnCount() > 0) {
            jTableConsultaEntradas.getColumnModel().getColumn(3).setPreferredWidth(30);
        }

        jButtonVerDevolucoes.setText("Fazer Devolução");
        jButtonVerDevolucoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerDevolucoesActionPerformed(evt);
            }
        });

        jButtonDevolucao.setText("Devolução");
        jButtonDevolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDevolucaoActionPerformed(evt);
            }
        });

        jLabelPesquisar.setText("Pesquisar Por Lote");

        jTextFieldPesquisarEntrada.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldPesquisarEntradaCaretUpdate(evt);
            }
        });

        jButtonVerControloResultados.setText("Ver Controlo Resultados");
        jButtonVerControloResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerControloResultadosActionPerformed(evt);
            }
        });

        jButtonVerLoteTotal.setText("Ver Lote Total(S/Devoluções)");
        jButtonVerLoteTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerLoteTotalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaEntradasLayout = new javax.swing.GroupLayout(jPanelConsultaEntradas);
        jPanelConsultaEntradas.setLayout(jPanelConsultaEntradasLayout);
        jPanelConsultaEntradasLayout.setHorizontalGroup(
            jPanelConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaEntradasLayout.createSequentialGroup()
                        .addComponent(jButtonVerDevolucoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonVerLoteTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonConsultaEntradasSair))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaEntradasLayout.createSequentialGroup()
                        .addComponent(jLabelPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPesquisarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonVerControloResultados)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDevolucao)))
                .addContainerGap())
        );
        jPanelConsultaEntradasLayout.setVerticalGroup(
            jPanelConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaEntradasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDevolucao)
                    .addComponent(jLabelPesquisar)
                    .addComponent(jTextFieldPesquisarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVerControloResultados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsultaEntradasSair)
                    .addComponent(jButtonVerDevolucoes)
                    .addComponent(jButtonVerLoteTotal))
                .addGap(138, 138, 138))
        );

        jLabelTituloConsultaEntradas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTituloConsultaEntradas.setText("jLabel25");

        javax.swing.GroupLayout jDialogConsultaEntradasLayout = new javax.swing.GroupLayout(jDialogConsultaEntradas.getContentPane());
        jDialogConsultaEntradas.getContentPane().setLayout(jDialogConsultaEntradasLayout);
        jDialogConsultaEntradasLayout.setHorizontalGroup(
            jDialogConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaEntradasLayout.createSequentialGroup()
                .addGroup(jDialogConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogConsultaEntradasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelConsultaEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogConsultaEntradasLayout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(jLabelTituloConsultaEntradas)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jDialogConsultaEntradasLayout.setVerticalGroup(
            jDialogConsultaEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTituloConsultaEntradas)
                .addGap(2, 2, 2)
                .addComponent(jPanelConsultaEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jDialogConsultaControloResultadosEntradas.setTitle("CONTROLO DE RESULTADO - ENTRADAS");
        jDialogConsultaControloResultadosEntradas.setMinimumSize(new java.awt.Dimension(918, 376));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Consulta Controlo de Resultados - Entradas");

        jTableConsultaControloResultadosEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Data", "Resultado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableConsultaControloResultadosEntradas);

        jButtonVerNaoConformidadesEntradas.setText("VER NAO CONFORMIDADES DAS ENTRADAS");
        jButtonVerNaoConformidadesEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerNaoConformidadesEntradasActionPerformed(evt);
            }
        });

        jButtonConsutaControloResultadosEntradasSair.setText("Voltar");
        jButtonConsutaControloResultadosEntradasSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsutaControloResultadosEntradasSairActionPerformed(evt);
            }
        });

        jButtonVerFichaCompletaControloResultados.setText("Ver ficha Completa");
        jButtonVerFichaCompletaControloResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerFichaCompletaControloResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaControloResultadosEntradasLayout = new javax.swing.GroupLayout(jPanelConsultaControloResultadosEntradas);
        jPanelConsultaControloResultadosEntradas.setLayout(jPanelConsultaControloResultadosEntradasLayout);
        jPanelConsultaControloResultadosEntradasLayout.setHorizontalGroup(
            jPanelConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonVerNaoConformidadesEntradas))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                        .addComponent(jButtonVerFichaCompletaControloResultados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonConsutaControloResultadosEntradasSair)))
                .addContainerGap())
        );
        jPanelConsultaControloResultadosEntradasLayout.setVerticalGroup(
            jPanelConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsultaControloResultadosEntradasLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE))
                    .addComponent(jButtonVerNaoConformidadesEntradas, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsutaControloResultadosEntradasSair)
                    .addComponent(jButtonVerFichaCompletaControloResultados))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaControloResultadosEntradasLayout = new javax.swing.GroupLayout(jDialogConsultaControloResultadosEntradas.getContentPane());
        jDialogConsultaControloResultadosEntradas.getContentPane().setLayout(jDialogConsultaControloResultadosEntradasLayout);
        jDialogConsultaControloResultadosEntradasLayout.setHorizontalGroup(
            jDialogConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaControloResultadosEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jDialogConsultaControloResultadosEntradasLayout.setVerticalGroup(
            jDialogConsultaControloResultadosEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaControloResultadosEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jDialogConsultaNaoConformidadesEntradas.setTitle("CONSULTAR NÃO CONFORMIDADES");
        jDialogConsultaNaoConformidadesEntradas.setMinimumSize(new java.awt.Dimension(733, 401));

        jTableConsultaNaoConformidadesEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Data", "Ocorrencia", "Func. Responsavel", "Medida Correctiva"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultaNaoConformidades.setViewportView(jTableConsultaNaoConformidadesEntradas);

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setText("Não Conformidades");

        javax.swing.GroupLayout jPanelConsultaNaoConformidadesEntradasLayout = new javax.swing.GroupLayout(jPanelConsultaNaoConformidadesEntradas);
        jPanelConsultaNaoConformidadesEntradas.setLayout(jPanelConsultaNaoConformidadesEntradasLayout);
        jPanelConsultaNaoConformidadesEntradasLayout.setHorizontalGroup(
            jPanelConsultaNaoConformidadesEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaNaoConformidadesEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneConsultaNaoConformidades, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanelConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelConsultaNaoConformidadesEntradasLayout.setVerticalGroup(
            jPanelConsultaNaoConformidadesEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addGap(19, 19, 19)
                .addComponent(jScrollPaneConsultaNaoConformidades, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaNaoConformidadesEntradasLayout = new javax.swing.GroupLayout(jDialogConsultaNaoConformidadesEntradas.getContentPane());
        jDialogConsultaNaoConformidadesEntradas.getContentPane().setLayout(jDialogConsultaNaoConformidadesEntradasLayout);
        jDialogConsultaNaoConformidadesEntradasLayout.setHorizontalGroup(
            jDialogConsultaNaoConformidadesEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaNaoConformidadesEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jDialogConsultaNaoConformidadesEntradasLayout.setVerticalGroup(
            jDialogConsultaNaoConformidadesEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogConsultaNaoConformidadesEntradasLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jPanelConsultaNaoConformidadesEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jDialogConsultaDevolucoes.setTitle("CONSULTA DEVOLUÇÕES");
        jDialogConsultaDevolucoes.setMinimumSize(new java.awt.Dimension(970, 400));

        jTableConsultaDevolucoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fornecedor", "Mater. Prima", "Lote Original", "Devolução Nº", "Data Devolução", "Quantidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableConsultaDevolucoes);
        if (jTableConsultaDevolucoes.getColumnModel().getColumnCount() > 0) {
            jTableConsultaDevolucoes.getColumnModel().getColumn(5).setMaxWidth(120);
        }

        jButtonConsultaDevolucoesSair.setText("Voltar");
        jButtonConsultaDevolucoesSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaDevolucoesSairActionPerformed(evt);
            }
        });

        jButtonVerFichaDetalhadaConsultaDevolucoes.setText("Ver Ficha Detalhada");
        jButtonVerFichaDetalhadaConsultaDevolucoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerFichaDetalhadaConsultaDevolucoesActionPerformed(evt);
            }
        });

        jComboBoxFornecedorDevolucoes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFornecedorDevolucoes.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxFornecedorDevolucoesPopupMenuWillBecomeInvisible(evt);
            }
        });

        jComboBoxMateriaPrimaDevolucoes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxMateriaPrimaDevolucoes.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxMateriaPrimaDevolucoesPopupMenuWillBecomeInvisible(evt);
            }
        });

        jLabelFornecedorDevolucoes.setText("Fornecedor");

        jLabelMateriaPrimaDevolucoes.setText("Materia-Prima");

        jButtonVerTodasAsDevolucoes.setText("Ver Todas as Devoluções");
        jButtonVerTodasAsDevolucoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerTodasAsDevolucoesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaDevolucoesLayout = new javax.swing.GroupLayout(jPanelConsultaDevolucoes);
        jPanelConsultaDevolucoes.setLayout(jPanelConsultaDevolucoesLayout);
        jPanelConsultaDevolucoesLayout.setHorizontalGroup(
            jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaDevolucoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanelConsultaDevolucoesLayout.createSequentialGroup()
                        .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConsultaDevolucoesLayout.createSequentialGroup()
                                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxFornecedorDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelFornecedorDevolucoes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelMateriaPrimaDevolucoes)
                                    .addComponent(jComboBoxMateriaPrimaDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButtonVerFichaDetalhadaConsultaDevolucoes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 438, Short.MAX_VALUE)
                        .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonVerTodasAsDevolucoes, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonConsultaDevolucoesSair, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanelConsultaDevolucoesLayout.setVerticalGroup(
            jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaDevolucoesLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFornecedorDevolucoes)
                    .addComponent(jLabelMateriaPrimaDevolucoes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFornecedorDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxMateriaPrimaDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVerTodasAsDevolucoes))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsultaDevolucoesSair)
                    .addComponent(jButtonVerFichaDetalhadaConsultaDevolucoes))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout jDialogConsultaDevolucoesLayout = new javax.swing.GroupLayout(jDialogConsultaDevolucoes.getContentPane());
        jDialogConsultaDevolucoes.getContentPane().setLayout(jDialogConsultaDevolucoesLayout);
        jDialogConsultaDevolucoesLayout.setHorizontalGroup(
            jDialogConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaDevolucoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jDialogConsultaDevolucoesLayout.setVerticalGroup(
            jDialogConsultaDevolucoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaDevolucoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaDevolucoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(288, 192));

        jButtonEntrar.setText("Entrar");
        jButtonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jButtonEntrar)
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jButtonEntrar)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntrarActionPerformed
        // BOTAO ENTRAR
        jDialogMenuEntradas.setLocationRelativeTo(this);
        jDialogMenuEntradas.setVisible(true);   
        
    }//GEN-LAST:event_jButtonEntrarActionPerformed

    private void jButtonNovaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaEntradaActionPerformed
        //BOTAO NOVA ENTRADA -> JANELA MENU ENTRADA
        jDialogNovaEntrada.setLocationRelativeTo(this);
        jDialogNovaEntrada.setVisible(true);
        LerBDFuncionarioComboBox();
        LerBDFornecedorComboBox(jComboBoxFornecedorEntrada);
        LerBDMateriaPrimaComboBox(jComboBoxMateriaPrimaEntrada);
        
        //PAINEIS VISIBEIS 
        //panel entradas
        for (Component cp : jPanelNovaEntrada.getComponents()) 
        cp.setEnabled(true);
        //panel conformidades
        for (Component cp : jPanelConformidadesNovaEntrada.getComponents()) 
        cp.setEnabled(true);
        //botoes
        for (Component cp : jPanelBotoesNovaEntrada.getComponents()) 
        cp.setEnabled(true);
         
        //BLOQUEAR O PANEL E OS COMPONENTES
        for (Component cp : jPanelADevolverNovaEntrada.getComponents()) 
        cp.setEnabled(false);
        
        jButtonDesvloquearPanel.setVisible(false);
        
        
        //TEXTO DO BOTAO
        jButtonGuardarNovaEntrada.setText("Verificar Devolução");
        //TEXTO DE QUANTIDADES
        jTextFieldQuantidadeEntrada.setText("0.0");
        jTextFieldQuantidadeADevolver.setText("0.0");
        
        //COMBO BOX CONFOMIDADES COLOCAR VALOR A ZERO
        jComboBoxTemperaturaEntrada.setSelectedIndex(0);
        jComboBoxDataValidadeEntrada.setSelectedIndex(0);
        jComboBoxCaraOrgonolepticasEntradas.setSelectedIndex(0);
        jComboBoxEmbalagemEntradas.setSelectedIndex(0);
        
        
        //GERAR LOTE
        GeraLote();
        jTextFieldLoteEntrada.setText(geraLote);
        
       
        
    }//GEN-LAST:event_jButtonNovaEntradaActionPerformed

    private void jButtonSairNovaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairNovaEntradaActionPerformed
        // BOTAO SAIR NOVA ENTRADA
        jDialogNovaEntrada.setVisible(false);
    }//GEN-LAST:event_jButtonSairNovaEntradaActionPerformed

    private void jButtonSairMateriaPrimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairMateriaPrimaActionPerformed
        // BOTAO SAIR -> JANELA MATERIA PRIMA
        jDialogNovaMateriaPrima.setVisible(false);
    }//GEN-LAST:event_jButtonSairMateriaPrimaActionPerformed

    private void jButtonNovaMateriaPrimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaMateriaPrimaActionPerformed
        // NOVA MATERIA PRIMA -> JANELA MENU
        jDialogNovaMateriaPrima.setLocationRelativeTo(this);
        jDialogNovaMateriaPrima.setVisible(true);
        LimpaNovaMateriaPrima();
    }//GEN-LAST:event_jButtonNovaMateriaPrimaActionPerformed

    private void jButtonGuardarMateriaPrimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarMateriaPrimaActionPerformed
        // BOTAO GUARDAR NOVA MATERIAS PRIMA -> JANELA NOVA MATERIA PRIMA 
        String nomeMateria = jTextFieldNomeMateriaPrima.getText();
        String descricaoMateria = jTextAreaDescricaoMateriaPrima.getText();
        String unidadeMateria = jTextFieldUnidadeMateriaPrima.getText();

        if (nomeMateria.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o Nome da Materia Prima !");
        } else if (unidadeMateria.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira a Unidade da Materia Prima !");
        } else {
            jDialogNovaMateriaPrima.setVisible(false);
            InserirNovaMateriaPrima();
            LimpaNovaMateriaPrima();
        }
    }//GEN-LAST:event_jButtonGuardarMateriaPrimaActionPerformed

    private void jTextFieldTipoProdutoFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTipoProdutoFornecedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTipoProdutoFornecedorActionPerformed

    private void jButtonNovoForncedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoForncedorActionPerformed
        // BOTAO NOVO FORNECEDOR -> JANELA MENU
        jDialogNovoFornecedor.setLocationRelativeTo(this);
        jDialogNovoFornecedor.setVisible(true);
    }//GEN-LAST:event_jButtonNovoForncedorActionPerformed

    private void jButtonGuardarNovoFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarNovoFornecedorActionPerformed
        // BOTAO GUARDAR NOVO FORNECEDOR -> JANELA NOVO FORNECEDOR
        String nome = jTextFieldNomeFornecedor.getText();
        String morada = jTextFieldMoradaFornecedor.getText();
        String codPostal = jTextFieldCodPostalFornecedor.getText();
        String localidade = jTextFieldLocalidadeFornecedor.getText();
        String contacto = jTextFieldContactoFornecedor.getText();
        String email = jTextFieldEmailFornecedor.getText();
        String nif = jTextFieldNIFFornecedor.getText();
        String tipoProduto = jTextFieldTipoProdutoFornecedor.getText();
        
        
        if (nome.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o Nome !");
        } else if (morada.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira a Morada !");
        } else if (codPostal.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o Codigo Postal !");
        } else if (localidade.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira a Localidade !");
        } else if (contacto.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o Contacto !");
        } else if (nif.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o NIF !");
        }else if(!nif.equals("")){
            if( validarNif(nif))
                System.out.println("valido");
            else{
                JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "NIF INVALIDO!");
                System.out.println("Invalisdo");
            }
            
        }else if (tipoProduto.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Insira o Tipo de Produto !");
        } else {
  
            InserirNovoFornecedor();
            LimpaNovoFornecedor();
            jDialogNovoFornecedor.setVisible(false);
        }
        
    }//GEN-LAST:event_jButtonGuardarNovoFornecedorActionPerformed

    private void jButtonSairNovoFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairNovoFornecedorActionPerformed
        // BOTAO SAIR -> JANELA NOVO FORNECEDOR
        jDialogNovoFornecedor.setVisible(false);
        LimpaNovoFornecedor();
    }//GEN-LAST:event_jButtonSairNovoFornecedorActionPerformed

    private void jButtonGuardarNovaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarNovaEntradaActionPerformed
        // BOTAO GUARDAR -> JANELA ENTRADAS
        
        //FAZER AS VALIDAÇÕES, SE OS CAMPOS ESTAO TODOS PREENCHIDOS
        String nomeFuncionarioResponsavelEntrada = jComboBoxFuncionarioResponsavelEntrada.getSelectedItem().toString();
        String nomeFornecedorEntrada = jComboBoxFornecedorEntrada.getSelectedItem().toString();
        String nomeMateriaPrimaEntrada = jComboBoxMateriaPrimaEntrada.getSelectedItem().toString();
        float qantidadeMatPrimaEntrada = Float.parseFloat(jTextFieldQuantidadeEntrada.getText().toString());
        
        String conformidadeTemperatura = jComboBoxTemperaturaEntrada.getSelectedItem().toString();
        String conformidadeDtaValidade = jComboBoxDataValidadeEntrada.getSelectedItem().toString();
        String conformidadeCaratOrgono = jComboBoxCaraOrgonolepticasEntradas.getSelectedItem().toString();
        String conformidadeEmbalagem = jComboBoxEmbalagemEntradas.getSelectedItem().toString();
        
        if(nomeFuncionarioResponsavelEntrada.equals("--Funcionario--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona um Funcionario!");
        }else if (nomeFornecedorEntrada.equals("--Fornecedor--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona um Fornecedor!");
        }else if (nomeMateriaPrimaEntrada.equals("--Materia Prima--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona uma Matéria-Prima!");
        }else if(qantidadeMatPrimaEntrada == 0.0){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nQuantidade não pode ser Zero!");
        }else if(conformidadeTemperatura.equals("--Opção--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona a Conformidade da Temperatura!");
        }else if (conformidadeDtaValidade.equals("--Opção--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona a Conformidade da Data de Validade!");
        }else if (conformidadeCaratOrgono.equals("--Opção--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona a Conformidade das Caract. Orgonolepticas!");
        }else if (conformidadeEmbalagem.equals("--Opção--")){
            JOptionPane.showMessageDialog(jDialogNovaEntrada, "Por Favor !\nSelecciona a Conformidade da Embalagem/Transporte!");
        }else{  
        
            InserirNovaEntrada();
        }
    }//GEN-LAST:event_jButtonGuardarNovaEntradaActionPerformed

    private void jButtonConsultaEntradasSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaEntradasSairActionPerformed
        // BOTAO SAIR -> JANELA CONSULTA ENTRADAS
        jDialogConsultaEntradas.setVisible(false);
    }//GEN-LAST:event_jButtonConsultaEntradasSairActionPerformed

    private void jButtonConsultaEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaEntradasActionPerformed
        // BOTAO CONSULTA ENTRADAS -> JANELA MENU
        jDialogConsultaEntradas.setLocationRelativeTo(this);
        jDialogConsultaEntradas.setVisible(true);
        
        jButtonDevolucao.setVisible(false);
       
        jLabelTituloConsultaEntradas.setText("Consulta Todas as Entradas");
        
        LimpaTabelaEntradas();
        ConsultaEntradas();
    }//GEN-LAST:event_jButtonConsultaEntradasActionPerformed

    private void jButtonVerDevolucoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerDevolucoesActionPerformed
        // BOTAO VER DEVOLUÇOES -> JANELA CONSULTA ENTRADAS
        String nomebotao = jButtonVerDevolucoes.getText();
        
        //int linha = jTableConsultaEntradas.getSelectedRow();
        
        
        //VERIFICAR SE A LINHA SELECCIONADA TEM DEVOLUÇÃO
        
        
        if (nomebotao.equals("Fazer Devolução")) {
            jButtonVerDevolucoes.setText("Ver Entradas");
            LimpaTabelaEntradas();
            ConsultaDevolucoesEntradas();
            
            jLabelTituloConsultaEntradas.setText("Consulta as Possiveis Devoluções");

            jButtonDevolucao.setVisible(true);
            jButtonVerControloResultados.setVisible(false);
         
        }else{
            jButtonVerDevolucoes.setText("Fazer Devolução");
            LimpaTabelaEntradas();
            ConsultaEntradas();
            
            jLabelTituloConsultaEntradas.setText("Consulta Todas as Entradas");
            
            jButtonDevolucao.setVisible(false);
            jButtonVerControloResultados.setVisible(true);
            
        }   
        
    }//GEN-LAST:event_jButtonVerDevolucoesActionPerformed

    private void jButtonDevolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDevolucaoActionPerformed
        // BOTAO DEVOLUÇÃO -> JANELA CONSULTA ENTRADAS
      
        VerEntradaSeleccionadaConsultaDevolucao();
        jDialogDevolucoes.setLocationRelativeTo(this);
        jDialogDevolucoes.setVisible(true);
        LerBDFuncionarioComboBoxDevolucao();
        
        CalculaQuantoFaltaDevolver();
        
        LimpaNovaDevolucao();
        
    }//GEN-LAST:event_jButtonDevolucaoActionPerformed

    private void jButtonConsultaDevolucoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaDevolucoesActionPerformed
        //BOTAO CONSULTA DEVOLUÇOES -> JANELA MENUS
        jDialogConsultaDevolucoes.setLocationRelativeTo(this);
        jDialogConsultaDevolucoes.setVisible(true);
        LimpaTabelaConsultaDevolucoes();
        ConsultaDevolucoesTabela();
        
        LerBDFornecedorComboBox(jComboBoxFornecedorDevolucoes);
        LerBDMateriaPrimaComboBox(jComboBoxMateriaPrimaDevolucoes);
    }//GEN-LAST:event_jButtonConsultaDevolucoesActionPerformed

    private void jButtonSairDevolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairDevolucaoActionPerformed
        // BOTAO SAIR -> JANELA DEVOLUÇÕES
        jDialogDevolucoes.setVisible(false);
    }//GEN-LAST:event_jButtonSairDevolucaoActionPerformed

    private void jButtonGuardaDevolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardaDevolucaoActionPerformed
        // BOTAO GUARDAR -> JANELA DEVOLUÇOES
        
        InserirDevolucao();
            
    }//GEN-LAST:event_jButtonGuardaDevolucaoActionPerformed

    private void jTextFieldPesquisarEntradaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldPesquisarEntradaCaretUpdate
        // PESQUISAR ENTRADA
        LimpaTabelaEntradas();
        PesquisaEntrada();
        
        
    }//GEN-LAST:event_jTextFieldPesquisarEntradaCaretUpdate

    private void jButtonConsutaControloResultadosEntradasSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsutaControloResultadosEntradasSairActionPerformed
        // BOTAO SAIR -> JANELA CONSULTA CONTROLO DE RESULTADOS
        jDialogConsultaControloResultadosEntradas.setVisible(false);
    }//GEN-LAST:event_jButtonConsutaControloResultadosEntradasSairActionPerformed

    private void jButtonVerNaoConformidadesEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerNaoConformidadesEntradasActionPerformed
        // BOTAO VFER NAO CONFORMIDADES -> JANELA CONSULTA CONTROLO DE RESULTADOS
        int linha = jTableConsultaControloResultadosEntradas.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione a Linha de um Controlo de Resultados!");
        } else {
            //VERIFICAR SE A LINHA DA TABELA  TEM RESULTADO C OU NC
            
            //NOME FUNCIOCARIO
            String nomeFuncionario = (String) jTableConsultaControloResultadosEntradas.getValueAt(linha, 0);
            String resultado = (String) jTableConsultaControloResultadosEntradas.getValueAt(linha, 3);


            if (resultado.equals("NC")) {


                //DEVOLVE O ID FUNCIONARIO
                idFuncionarioSelecionadoNaoConformidade = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

                //FUNÇÃO PARA CARREGAR OS DADOS PARA A TABELA
                LimpaTabelaNaoConformidades();
                ConsultaNaoConformidadesEntradas(idFuncionarioSelecionadoNaoConformidade);

                if (CONTA_LINHAS_NAOCONFORMIDADES == 0) {
                    JOptionPane.showMessageDialog(jDialogConsultaControloResultadosEntradas, "Equipamento Ainda não contem nenhuma Não Conformidade  ! ");
                } else {
                    jDialogConsultaNaoConformidadesEntradas.setLocationRelativeTo(this);
                    jDialogConsultaNaoConformidadesEntradas.setVisible(true);
                }

            } else {
                JOptionPane.showMessageDialog(jDialogConsultaControloResultadosEntradas, "Linha Selecciona não contem Nehuma Não Conformidade ! ");
            }
            
        }
    
    }//GEN-LAST:event_jButtonVerNaoConformidadesEntradasActionPerformed

    private void jButtonVerControloResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerControloResultadosActionPerformed
        // VER CONTROLO DE RESULTADOS -> JANELA CONSULTA ENTRADAS
         VerEntradaSeleccionadaConsultaControloResultados();
         
         LimpaTabelaControloResultados();
         ConsultaControloResultadosEntradas();
           
         if(abrirControloResultados == true){
           jDialogConsultaControloResultadosEntradas.setLocationRelativeTo(this);
           jDialogConsultaControloResultadosEntradas.setVisible(true);
         }
            
    }//GEN-LAST:event_jButtonVerControloResultadosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTAO SAIR -> JANELA NAO CONFORMIDADES
        jDialogConsultaNaoConformidadesEntradas.setVisible(false);
        LimpaTabelaNaoConformidades();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonConsultaDevolucoesSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaDevolucoesSairActionPerformed
        //BOTAO SAIR CONSULTA DEVOLUCOES -> JANELA CONCULTA DEVOLUÇOES
        jDialogConsultaDevolucoes.setVisible(false);
    }//GEN-LAST:event_jButtonConsultaDevolucoesSairActionPerformed

    private void jTextFieldCodPostalFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodPostalFornecedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodPostalFornecedorActionPerformed

    private void jTextFieldCodPostalFornecedorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldCodPostalFornecedorCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodPostalFornecedorCaretUpdate

    private void jButtonDesvloquearPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesvloquearPanelActionPerformed
        // DESBLOQUEAR PANEL'S DAS ENTRADAS
            for (Component cp : jPanelADevolverNovaEntrada.getComponents()) 
            cp.setEnabled(true);
            
            
            for (Component cp : jPanelConformidadesNovaEntrada.getComponents()) 
            cp.setEnabled(true);
            
            for (Component cp : jPanelNovaEntrada.getComponents()) 
            cp.setEnabled(true);
            
            jButtonDesvloquearPanel.setVisible(false);
            
            
        
    }//GEN-LAST:event_jButtonDesvloquearPanelActionPerformed

    private void jButtonVerFichaDetalhadaConsultaDevolucoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerFichaDetalhadaConsultaDevolucoesActionPerformed
        // VER FICHA DETALHADA -> JANELA CONSULTA DEVLUÇOES
        
        int linha = jTableConsultaDevolucoes.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione a Linha de uma Devolução!");
        } else {
            //VERIFCAR QUAL É A dEVOLUÇÃO

            String nomeForncedor = (String) jTableConsultaDevolucoes.getValueAt(linha, 0);
            int idFornecedor = selectId("FORNECEDOR", "NOME", nomeForncedor, "IDFORNECEDOR");

            String materiaPrima = (String) jTableConsultaDevolucoes.getValueAt(linha, 1);
            int idMateriaPrima = selectId("MATERIA_PRIMA", "NOME", materiaPrima, "IDMATERIAPRIMA");

            String dataDevolucao = (String) jTableConsultaDevolucoes.getValueAt(linha, 4);

            String quant = (String) jTableConsultaDevolucoes.getValueAt(linha, 5);
            float quantidade = Float.parseFloat(quant);

            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) {
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            //SABER QUAL O ID DA DEVOLUÇÃO, PARA FAZER A PESQUISA
            try {

                con = DriverManager.getConnection(url);
                String nomeTabela = "DEVOLUCOES";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE IDFORNECEDOR=" + idFornecedor + " AND IDMATERIAPRIMA=" + idMateriaPrima + " AND DATADEVOLUCAO='" + dataDevolucao + "' AND QUANTIDADEDEVOLVIDA=" + quantidade;
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    idDevolucaoSeleccionado = rs.getInt("IDDEVOLUCAO");
                }

                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }

            ConsultaDevolucaoMostraFichaCompleta();

            System.out.println("NOME FORNECEDOR " + nomeForncedor);
            System.out.println("ID FORNECEDOR " + idFornecedor);
            System.out.println("NOME MATER. PRIMA " + materiaPrima);
            System.out.println("ID MATERIA PRIMA " + idMateriaPrima);
            System.out.println("QUANTIDADE " + quantidade);
            System.out.println("\nID DEVOLUÇÃO : " + idDevolucaoSeleccionado);

            
        }
        
        
        
        
    }//GEN-LAST:event_jButtonVerFichaDetalhadaConsultaDevolucoesActionPerformed

    private void jButtonVerFichaCompletaControloResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerFichaCompletaControloResultadosActionPerformed
        // BOTAO VER FICHA COMPLETA CONTROLO DE RESULTADOS -> JANELA CONTROLO DE RESULTADOS
        
        ConsultaControloResultadosEntradaFichaCompleta();
        
    }//GEN-LAST:event_jButtonVerFichaCompletaControloResultadosActionPerformed

    private void jComboBoxFornecedorDevolucoesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxFornecedorDevolucoesPopupMenuWillBecomeInvisible
        //COMBO BOX MOSTRA FUNCIONARIO DEVOLUÇÕES -> PESQUISAR DEVOLUÇOES
        
       
        String nomeFornecedorPesquisaDevolucao = jComboBoxFornecedorDevolucoes.getSelectedItem().toString();
        idForncedorPesquisaDevolucao = selectId("FORNECEDOR", "NOME", nomeFornecedorPesquisaDevolucao, "IDFORNECEDOR");
        
        //VERIFICAR O CAMPO DA COMBO BOS MATERIA PRIMA
        String nomeMateriaPrimaPesquisaDevolucao = jComboBoxMateriaPrimaDevolucoes.getSelectedItem().toString();
        
        
        //PARA APARECEREM TODOS OS DADOS INSERIDOS
        if(nomeFornecedorPesquisaDevolucao.equals("--Fornecedor--")){
            ConsultaDevolucoesTabela();
        }
  
        if (nomeMateriaPrimaPesquisaDevolucao.equals("--Materia Prima--")) {
            idMateriaPrimaPesquisaDevolucao = 0;
        }

         LimpaTabelaConsultaDevolucoes();
         PesquisaDevolucoesComDadosDeEntrada();         
       
         
        System.out.println("--- FORNECEDOR");
        System.out.println("FORNECEDOR PESQUISA : " + nomeFornecedorPesquisaDevolucao);
        System.out.println("ID FORNECEDOR : " + idForncedorPesquisaDevolucao);
        System.out.println("MATERIA PRIMA : " + idMateriaPrimaPesquisaDevolucao);
        //VER QUAL O NOME QUE ESTAMOS A SELECCIONAR 


        
        
        
    }//GEN-LAST:event_jComboBoxFornecedorDevolucoesPopupMenuWillBecomeInvisible

    private void jComboBoxMateriaPrimaDevolucoesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxMateriaPrimaDevolucoesPopupMenuWillBecomeInvisible
        // COMBO BOX MOSTRA MATERIA PRIMA -> PESQUISAR DEVOLUÇOES
        
        String nomeMateriaPrimaPesquisaDevolucao = jComboBoxMateriaPrimaDevolucoes.getSelectedItem().toString();
        idMateriaPrimaPesquisaDevolucao = selectId("MATERIA_PRIMA", "NOME", nomeMateriaPrimaPesquisaDevolucao, "IDMATERIAPRIMA");
        
        //VERIFCAR QUAL A OPÇÃO ESCOLHIDA NO FORNECEDOR
        String nomeFornecedorPesquisaDevolucao = jComboBoxFornecedorDevolucoes.getSelectedItem().toString();
        
        if(nomeFornecedorPesquisaDevolucao.equals("--Fornecedor--")){
            idForncedorPesquisaDevolucao = 0;
        }
        
        LimpaTabelaConsultaDevolucoes();
        PesquisaDevolucoesComDadosDeEntrada();
        
         
        System.out.println("--- MATERIA PRIMA");
        System.out.println("MATERIA PESQUISA : " + nomeMateriaPrimaPesquisaDevolucao);
        System.out.println("ID MATERIA PRIMA : " + idMateriaPrimaPesquisaDevolucao);
        System.out.println("FORNECEDOR : " + nomeFornecedorPesquisaDevolucao);
        
    }//GEN-LAST:event_jComboBoxMateriaPrimaDevolucoesPopupMenuWillBecomeInvisible

    private void jButtonVerTodasAsDevolucoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerTodasAsDevolucoesActionPerformed
        // BOTAO VER TODAS AS DEVOLUÇOES
        
        LimpaTabelaConsultaDevolucoes();
        ConsultaDevolucoesTabela();
        
    }//GEN-LAST:event_jButtonVerTodasAsDevolucoesActionPerformed

    private void jButtonVerLoteTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerLoteTotalActionPerformed
        // BOTAO VER TOTAL DE MATERIA PRIMA SEM DEVOLUÇOES -> JANELA CONSULTA ENTRADAS
        
         int linha = jTableConsultaEntradas.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione a Linha de uma Entrada!");
        } else {
            
           LoteOriginalSeleccionado = (String) jTableConsultaEntradas.getValueAt(linha, 4);
            
            System.out.println("LOTE ORIGINAL : " + LoteOriginalSeleccionado);
            CalculaQuatidadeLoteTotalEntrada();
            
        }
    }//GEN-LAST:event_jButtonVerLoteTotalActionPerformed

    
    
/*  *************************** FUNÇOES ****************************    */ 
    
    /*  VER  */
    
    private void VerEntradaSeleccionadaConsultaDevolucao() {

        int linha = jTableConsultaEntradas.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaEntradas, "Seleccione a Linha de uma Entrada!");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeFuncionario = (String) jTableConsultaEntradas.getValueAt(linha, 0);
            int idFuncionario = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

            String nomeFornecedor = (String) jTableConsultaEntradas.getValueAt(linha, 1);
            idFornecedorDevolucao = selectId("FORNECEDOR", "NOME", nomeFornecedor, "IDFORNECEDOR");

            String matPrima = (String) jTableConsultaEntradas.getValueAt(linha, 2);
            idMateriaPrimaDevolucao = selectId("MATERIA_PRIMA", "NOME", matPrima, "IDMATERIAPRIMA");

            String dataEntrega = (String) jTableConsultaEntradas.getValueAt(linha, 3);
            String lote = (String) jTableConsultaEntradas.getValueAt(linha, 4);
            int idEntrada = selectId("ENTRADA", "LOTEORIGEM", lote, "IDENTRADA");
            
            String peso = (String) jTableConsultaEntradas.getValueAt(linha, 5);
            String devolucao = (String) jTableConsultaEntradas.getValueAt(linha, 6);
            String devolucaoActualizar = "S";
            
            
         

            //DEVOLVER O ID DA ENTRADA COMPARANDO TODOS OS CAMPOS

           // if (devolucao.equals("Sim")) {

                try {
                    Class.forName("org.apache.derby.jdbc.ClientDriver");
                } catch (ClassNotFoundException e) {
                    System.err.print("ClassNotFoundException: ");
                    System.err.println(e.getMessage());
                    System.out.println("O driver expecificado nao foi encontrado.");
                }

                try {

                    con = DriverManager.getConnection(url);
                    String nomeTabela = "ENTRADA";
                   // String sql = "SELECT * FROM " + nomeTabela + " WHERE DEVOLUCAO='" + devolucaoActualizar + "' and IDFORNECEDOR=" + idFornecedorDevolucao + " and IDFUNCIONARIO=" + idFuncionario + " and IDMATERIAPRIMA=" + idMateriaPrimaDevolucao + " and LOTEORIGEM='" + lote + "'";
                    String sql = "SELECT * FROM " + nomeTabela + " WHERE IDENTRADA = " + idEntrada+ " AND DEVOLUCAO='" + devolucaoActualizar+"'";
                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    ResultSet rs = st.executeQuery();

                    while (rs.next()) {

                        idEntradaSeleccionada = rs.getInt("IDENTRADA");
                        quantidadeEntradaTotalSelecionada = rs.getFloat("QUANTIDADE");
                        quantidadeADevolverSelecionada = rs.getFloat("ADEVOLVER");
                    }

                    st.close();
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }



            //} else {
           //     JOptionPane.showMessageDialog(jDialogConsultaEntradas, "Linha Seleccionada Não Apresenta Devoluções!");
           // }

            System.out.println("BOTAO DEVOLOÇÃO -> JANELA CONSULTA ENTRADAS");
            System.out.println("NOME FUNCIO: " + nomeFuncionario);
            System.out.println("ID FUNCIO: " + idFuncionario);
            System.out.println("NOME FORNECEDOR: " + nomeFornecedor);
            System.out.println("ID FORNECEDOR: " + idFornecedorDevolucao);
            System.out.println("NOME MATERIA PRIM: " + matPrima);
            System.out.println("ID MATERIA PRIMA: " + idMateriaPrimaDevolucao);
            System.out.println("DATA ENTREGA: " + dataEntrega);
            System.out.println("LOTE: " + lote);
            System.out.println("ID ENTRADA: " + idEntrada);
            System.out.println("QUANTIDADE: " + peso);
            System.out.println("ID ENTRADA SELECIONADO : " + idEntradaSeleccionada);
            System.out.println("QUANTIDADE ENTRADA : " + quantidadeEntradaTotalSelecionada);
            System.out.println("QUANTIDADE A DEVOLVER : " + quantidadeADevolverSelecionada);


        }
    }

    private void VerEntradaSeleccionadaConsultaControloResultados() {

        int linha = jTableConsultaEntradas.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaEntradas, "Seleccione a Linha de uma Entrada!");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeFuncionario = (String) jTableConsultaEntradas.getValueAt(linha, 0);
            int idFuncionario = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

            String nomeFornecedor = (String) jTableConsultaEntradas.getValueAt(linha, 1);
            idFornecedorDevolucao = selectId("FORNECEDOR", "NOME", nomeFornecedor, "IDFORNECEDOR");

            String matPrima = (String) jTableConsultaEntradas.getValueAt(linha, 2);
            idMateriaPrimaDevolucao = selectId("MATERIA_PRIMA", "NOME", matPrima, "IDMATERIAPRIMA");

            String dataEntrega = (String) jTableConsultaEntradas.getValueAt(linha, 3);
            String lote = (String) jTableConsultaEntradas.getValueAt(linha, 4);
            String peso = (String) jTableConsultaEntradas.getValueAt(linha, 5);
            String devolucao = (String) jTableConsultaEntradas.getValueAt(linha, 6);


            //DEVOLVER O ID DA ENTRADA COMPARANDO TODOS OS CAMPOS

            if (devolucao.equals("Sim")) {
                devolucao = "S";
            } else if (devolucao.equals("Não")) {
                devolucao = "N";
            }


            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) {
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {

                con = DriverManager.getConnection(url);
                String nomeTabela = "ENTRADA";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE DEVOLUCAO='" + devolucao + "' and IDFORNECEDOR=" + idFornecedorDevolucao + " and IDFUNCIONARIO=" + idFuncionario + " and IDMATERIAPRIMA=" + idMateriaPrimaDevolucao + " and LOTEORIGEM='" + lote + "'";
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {

                    idEntradaSeleccionada = rs.getInt("IDENTRADA");
                    quantidadeEntradaTotalSelecionada = rs.getFloat("QUANTIDADE");
                }

                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }





            System.out.println("NOME FUNCIO: " + nomeFuncionario);
            System.out.println("ID FUNCIO: " + idFuncionario);
            System.out.println("NOME FORNECEDOR: " + nomeFornecedor);
            System.out.println("ID FORNECEDOR: " + idFornecedorDevolucao);
            System.out.println("NOME MATERIA PRIM: " + matPrima);
            System.out.println("ID MATERIA PRIMA: " + idMateriaPrimaDevolucao);
            System.out.println("DATA ENTREGA: " + dataEntrega);
            System.out.println("LOTE: " + lote);
            System.out.println("QUANTIDADE: " + peso);
            System.out.println("ID ENTRADA SELECIONADO : " + idEntradaSeleccionada);
            System.out.println("QUANTIDADE ENTRADA : " + quantidadeEntradaTotalSelecionada);


        }
    }

    /* LER */
    private void LerBDFuncionarioComboBox() {
        //LIMPAR A COMBO
        jComboBoxFuncionarioResponsavelEntrada.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "FUNCIONARIO";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();

        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        jComboBoxFuncionarioResponsavelEntrada.addItem("--Funcionario--");
        Iterator<String> it = opcao.iterator();
        while (it.hasNext()) {
            jComboBoxFuncionarioResponsavelEntrada.addItem(it.next());
        }

    }

    private void LerBDFuncionarioComboBoxDevolucao() {
        //LIMPAR A COMBO
        jComboBoxFuncionarioResponsavelDevolucao.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "FUNCIONARIO";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();

        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        jComboBoxFuncionarioResponsavelDevolucao.addItem("--Funcionario--");
        Iterator<String> it = opcao.iterator();
        while (it.hasNext()) {
            jComboBoxFuncionarioResponsavelDevolucao.addItem(it.next());
        }

    }

    private void LerBDFornecedorComboBox(JComboBox ComboBoxFornecedor) {
        //LIMPAR A COMBO
        ComboBoxFornecedor.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "FORNECEDOR";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();

        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        ComboBoxFornecedor.addItem("--Fornecedor--");
        Iterator<String> it = opcao.iterator();
        while (it.hasNext()) {
            ComboBoxFornecedor.addItem(it.next());
        }

    }

    private void LerBDMateriaPrimaComboBox(JComboBox ComboBoxMateriaPrima) {
       
        ComboBoxMateriaPrima.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "MATERIA_PRIMA";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();

        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        ComboBoxMateriaPrima.addItem("--Materia Prima--");
        Iterator<String> it = opcao.iterator();
        while (it.hasNext()) {
            ComboBoxMateriaPrima.addItem(it.next());
        }

    }
    
   

    /* CONSULTAS   */
    private void ConsultaEntradas() {

        int idFuncionario = 0;
        String nomeFuncionario = "";

        int idFornecedor = 0;
        String nomeFornecedor = "";

        int idMateriaPrima = 0;
        String nomeMateriaPrima = "";

        String dataEntrega = "";
        String loteOrigem = "";
        String peso = "";
        String temperatura = "";
        String dataValidade = "";
        String caraOrgonolept = "";
        String embalagem = "";
        String devolucao = "";
        String aDevolver = "";
        
        model = (DefaultTableModel) jTableConsultaEntradas.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "ENTRADA";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idMateriaPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMateriaPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMateriaPrima, "NOME");

                dataEntrega = rs.getString("DATAENTREGA");
                loteOrigem = rs.getString("LOTEORIGEM");
                peso = rs.getString("QUANTIDADE");
                temperatura = rs.getString("TEMPERATURA");
                dataValidade = rs.getString("DATAVALIDADE");
                caraOrgonolept = rs.getString("CARATORGONOLEPTICAS");
                embalagem = rs.getString("EMBALAGEM");
                devolucao = rs.getString("DEVOLUCAO");
                aDevolver = rs.getString("ADEVOLVER");
                

                if (devolucao.equals("S")) {
                    devolucao = "Sim";
                } else {
                    devolucao = "Não";
                }

                model.addRow(new Object[]{nomeFuncionario, nomeFornecedor, nomeMateriaPrima, dataEntrega, loteOrigem, peso, aDevolver});
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }

    private void ConsultaDevolucoesEntradas() {
        int idFornecedor = 0;
        String nomeFornecedor = "";

        int idFuncionario = 0;
        String nomeFuncionario = "";

        int idMateriaPrima = 0;
        String nomeMateriaPrima = "";

        String dataEntrega = "";
        String loteOrigem = "";
        String peso = "";
        String temperatura = "";
        String dataValidade = "";
        String caraOrgonolept = "";
        String embalagem = "";
        String devolucao = "";
        String aDevolver = "";

        String where = "S";
        model = (DefaultTableModel) jTableConsultaEntradas.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "ENTRADA";
            String sql = "SELECT * FROM " + nomeTabela + " WHERE DEVOLUCAO='" + where + "'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idMateriaPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMateriaPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMateriaPrima, "NOME");

                dataEntrega = rs.getString("DATAENTREGA");
                loteOrigem = rs.getString("LOTEORIGEM");
                peso = rs.getString("QUANTIDADE");
                temperatura = rs.getString("TEMPERATURA");
                dataValidade = rs.getString("DATAVALIDADE");
                caraOrgonolept = rs.getString("CARATORGONOLEPTICAS");
                embalagem = rs.getString("EMBALAGEM");
                devolucao = rs.getString("DEVOLUCAO");
                aDevolver = rs.getString("ADEVOLVER");

                if (devolucao.equals("S")) {
                    devolucao = "Sim";
                } else {
                    devolucao = "Não";
                }

                model.addRow(new Object[]{nomeFuncionario, nomeFornecedor, nomeMateriaPrima, dataEntrega, loteOrigem, peso, aDevolver});
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }

    private void ConsultaControloResultadosEntradas() {

        //CAMPOS DA TABELA
        int idFuncionario = 0;
        String nomeFuncionario = "";
        int idEntrada = 0;

        String data = "";
        String resultado = "";
        String fichaTecnica = "";
        String descricao = "";



        model = (DefaultTableModel) jTableConsultaControloResultadosEntradas.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "SELECT * FROM " + nomeTabela + " WHERE IDENTRADA=" + idEntradaSeleccionada;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idEntrada = rs.getInt("IDENTRADA");


                data = rs.getString("DATA");
                resultado = rs.getString("RESULTADO");
                fichaTecnica = rs.getString("FICHATECNICA");
                descricao = rs.getString("DESCRICAO");

                model.addRow(new Object[]{nomeFuncionario, data, resultado});
                CONTA_LINHAS_CONTROLORESULTADOS++;
                abrirControloResultados = true;
            }



            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }



    }

    private void ConsultaNaoConformidadesEntradas(int idFuncionarioSelecionado) {

        int funcionario = idFuncionarioSelecionado;

        int idFuncionario = 0;
        String nomefuncionario = "";
        String dataNaoConform = "";
        String ocorrencia = "";
        String medidaCorrecti = "";
        String resultado = "NC";
        String correctiva = "N";
        int idFuncionarioResponsavel = 0;
        String nomeFuncionarioResponsavel = "";

        model = (DefaultTableModel) jTableConsultaNaoConformidadesEntradas.getModel();
        CONTA_LINHAS_NAOCONFORMIDADES = 0;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "select * from " + nomeTabela + " where IDFUNCIONARIO=" + funcionario + " and RESULTADO=" + "'" + resultado + "'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idControloResuladoSeleccionado = rs.getInt("IDCONTRESULTADOS");
                System.out.println("IDCONTROLORESULTADO Pesquisar -> " + idControloResuladoSeleccionado);
                //VARIVAEL GLOBAL

                //ESCREVER NA TABELA A PESQUISA
                String nomeTabela2 = "NAOCONFORMIDADES";
                String sql2 = "select * from " + nomeTabela2 + " where IDCONTRESULTADOS=" + idControloResuladoSeleccionado + " and CORRECTIVA='" + correctiva + "'";
                PreparedStatement st2 = (PreparedStatement) con.prepareStatement(sql2);
                ResultSet rs2 = st2.executeQuery();

                while (rs2.next()) {

                    //idNaoConformidade = rs2.getInt("IDNAOCONF");
                    //idContResultado = rs2.getInt("IDCONTRESULTADOS");

                    idFuncionario = rs2.getInt("IDFUNCIONARIO");
                    nomefuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                    dataNaoConform = rs2.getString("DATANAOCONFORMIDADE");
                    ocorrencia = rs2.getString("OCORRENCIA");
                    medidaCorrecti = rs2.getString("MEDIDACORRECTIVA");

                    idFuncionarioResponsavel = rs2.getInt("IDFUNCIONARIOMEDIDACORRECTIVA");
                    nomeFuncionarioResponsavel = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionarioResponsavel, "NOME");

                    model.addRow(new Object[]{nomefuncionario, dataNaoConform, ocorrencia, nomeFuncionarioResponsavel, medidaCorrecti});

                    CONTA_LINHAS_NAOCONFORMIDADES++;
                }
                st2.close();
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }


    }

    private void ConsultaDevolucoesTabela() {
        int idFornecedor = 0;
        String nomeFornecedor = "";
        
        int idMateriaPrima = 0;
        String nomeMatPrima = "";

        int idEntrada = 0;
        String loteOriginal = "";
        
        String dataDevolucao = "";
        String quantiDevolvida = "";
        String observacao = "";
        int devolucaoNum = 0;
        
       model = (DefaultTableModel) jTableConsultaDevolucoes.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }



        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "DEVOLUCOES";
            String sql = "SELECT * FROM " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idMateriaPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMatPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMateriaPrima, "NOME");
                
                dataDevolucao = rs.getString("DATADEVOLUCAO");
                quantiDevolvida = rs.getString("QUANTIDADEDEVOLVIDA");

                observacao = rs.getString("OBSERVACAO");
                
                devolucaoNum = rs.getInt("DEVOLUCAONUMERO");
                
                
                //IR BUSCAR O LOTE DA MATERIA PRIMA ATRAVES DO ID ENTRADA
                idEntrada = rs.getInt("IDENTRADA");
                    
                    Connection con2 = DriverManager.getConnection(url);
                    String nomeTabela2= "ENTRADA";
                    String sql2 = "SELECT * FROM " + nomeTabela2 + " WHERE IDENTRADA=" + idEntrada;
                    PreparedStatement st2 = (PreparedStatement) con2.prepareStatement(sql2);
                    ResultSet rs2 = st2.executeQuery();
                    while (rs2.next()){
                        loteOriginal = rs2.getString("LOTEORIGEM");
                    }
                    st2.close();
                    con2.close();
                                 
                model.addRow(new Object[]{nomeFornecedor, nomeMatPrima,loteOriginal, devolucaoNum, dataDevolucao, quantiDevolvida});
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        
      

    }
    
    private void ConsultaDevolucaoMostraFichaCompleta(){
    
        int idFornecedor = 0;
        String nomeFornecedor = "";
        
        int idFuncionario = 0;
        String nomeFuncionario = "";
        
        int idMatPrima = 0;
        String nomeMatPrima = "";

        int idEntrada = 0;
        
        String dataDevolucao = "";
        
        String quantiDevolvida = "";
        
        String observacao = "";
        String loteOriginal = "";

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "DEVOLUCOES";
            String sql = "SELECT * FROM " + nomeTabela + " WHERE IDDEVOLUCAO="+idDevolucaoSeleccionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idFuncionario =  rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idEntrada = rs.getInt("IDENTRADA");
                
                idMatPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMatPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMatPrima, "NOME");

                dataDevolucao = rs.getString("DATADEVOLUCAO");
                quantiDevolvida = rs.getString("QUANTIDADEDEVOLVIDA");

                observacao = rs.getString("OBSERVACAO");

                //IR BUSCAR O LOTE ATRAVES DO ID ENTRADA
                
                Connection con2 = DriverManager.getConnection(url);
                    String nomeTabela2= "ENTRADA";
                    String sql2 = "SELECT * FROM " + nomeTabela2 + " WHERE IDENTRADA=" + idEntrada;
                    PreparedStatement st2 = (PreparedStatement) con2.prepareStatement(sql2);
                    ResultSet rs2 = st2.executeQuery();
                    while (rs2.next()){
                        loteOriginal = rs2.getString("LOTEORIGEM");
                    }
                    st2.close();
                    con2.close();            
                
                JOptionPane.showMessageDialog(jDialogConsultaDevolucoes, "INFORMAÇÃO!\n "
                                                                       + "NOME FUNCIONARIO : " + nomeFuncionario+"\n\n"
                                                                       + "NOME FORNECEDOR : " + nomeFornecedor+"\n\n"
                                                                       + "LOTE : " + loteOriginal + "\n\n"
                                                                       + "MATER. PRIMA : " + nomeMatPrima + "\n\n"
                                                                       + "DATA DEVOLUÇÃO : " + dataDevolucao + "\n\n"
                                                                       + "QUANTID. DEVOLV. : " +quantiDevolvida + "\n\n"
                                                                       + "OBSERVAÇÃO : " + observacao + "\n\n\n");
                
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    
    private void ConsultaControloResultadosEntradaFichaCompleta(){
    
        //CAMPOS DA TABELA
        int idFuncionario = 0;
        String nomeFuncionario = "";
        int idEntrada = 0;
        String data = "";
        String fichaTecnica = "";
        String descricao = "";
        
        
        model = (DefaultTableModel) jTableConsultaControloResultadosEntradas.getModel();
        
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        
        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "SELECT * FROM " + nomeTabela + " WHERE IDENTRADA="+idEntradaSeleccionada;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idEntrada = rs.getInt("IDENTRADA");
                
                data = rs.getString("DATA");
                fichaTecnica = rs.getString("FICHATECNICA");
                descricao = rs.getString("DESCRICAO");

                JOptionPane.showMessageDialog(jDialogConsultaDevolucoes, "FICHA CONTROLO RESULTADOS!\n "
                                                                       + "NOME FUNCIONARIO: " + nomeFuncionario+"\n"
                                                                       + "Nº ENTREGA : " + idEntrada+"\n"
                                                                       + "DATA: " + data + "\n"
                                                                       + "FICHA TECNICA: " + fichaTecnica + "\n"
                                                                       + "DESCRIÇÃO: " + descricao );
                
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }


        
        
    }

    
    private void PesquisaDevolucoesComDadosDeEntrada(){
    
        int idFornecedor = 0;
        String nomeFornecedor = "";
        int idMateriaPrima = 0;
        String nomeMatPrima = "";
        String dataDevolucao = "";
        String quantiDevolvida = "";
        int devolucaoNum = 0;
        
        String opcaoSelect = "";
        
        int idEntrada = 0;
        String loteOriginal = "";

        model = (DefaultTableModel) jTableConsultaDevolucoes.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }



        try {
          
            CONTA_NUMERO_DEVOLUCOES = 0;
            con = DriverManager.getConnection(url);
            String nomeTabela = "DEVOLUCOES";
          
            //VERIFICAR QUAL O SELECT QUE VAMOS EFECTUAR
            
            if(idForncedorPesquisaDevolucao != 0 && idMateriaPrimaPesquisaDevolucao == 0){
                //VAMOS PESQUISAR SO PELO FORNECEDOR
                 sql = "SELECT * FROM " + nomeTabela + " WHERE IDFORNECEDOR=" + idForncedorPesquisaDevolucao ;
                System.out.println("SELECT FORNCEDOR");
            } else if (idForncedorPesquisaDevolucao == 0 && idMateriaPrimaPesquisaDevolucao != 0){
                //VAMOS PESQUISAR PELA MATERIA PRIMA
                 sql = "SELECT * FROM " + nomeTabela + " WHERE IDMATERIAPRIMA=" + idMateriaPrimaPesquisaDevolucao ;
                System.out.println("SELECT MATERIA PRIMA");
            }else{
                //VAMOS PESQUISAR PELO FORNECEDOR E PELA MATERIA-PRIMA
                 sql = "SELECT * FROM " + nomeTabela + " WHERE IDFORNECEDOR=" + idForncedorPesquisaDevolucao +" AND IDMATERIAPRIMA="+idMateriaPrimaPesquisaDevolucao;
                 System.out.println("SELECT FORNCEDOR e MATERIA PRIMA");
            }
  
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idMateriaPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMatPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMateriaPrima, "NOME");

                dataDevolucao = rs.getString("DATADEVOLUCAO");
                quantiDevolvida = rs.getString("QUANTIDADEDEVOLVIDA");

                devolucaoNum = rs.getInt("DEVOLUCAONUMERO");
             
                
                 //IR BUSCAR O LOTE DA MATERIA PRIMA ATRAVES DO ID ENTRADA
                idEntrada = rs.getInt("IDENTRADA");
                    
                    Connection con2 = DriverManager.getConnection(url);
                    String nomeTabela2= "ENTRADA";
                    String sql2 = "SELECT * FROM " + nomeTabela2 + " WHERE IDENTRADA=" + idEntrada;
                    PreparedStatement st2 = (PreparedStatement) con2.prepareStatement(sql2);
                    ResultSet rs2 = st2.executeQuery();
                    while (rs2.next()){
                        loteOriginal = rs2.getString("LOTEORIGEM");
                               
                    }
                    st2.close();
                    con2.close();
                
                model.addRow(new Object[]{nomeFornecedor, nomeMatPrima, loteOriginal,devolucaoNum, dataDevolucao, quantiDevolvida});
               CONTA_NUMERO_DEVOLUCOES++;
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        } 
        
        System.out.println("\nCONTA_NUMERO_DEVOLUÇOES --> " + CONTA_NUMERO_DEVOLUCOES );
        
//         if (CONTA_NUMERO_DEVOLUCOES == 0){
//           
//         }
      
        
    
    }
    

    /* INSERIR */
    private void InserirNovaMateriaPrima() {

        //DAODS A GRAVAR 
        String nomeMateria = jTextFieldNomeMateriaPrima.getText();
        String descricaoMateria = jTextAreaDescricaoMateriaPrima.getText();
        String unidadeMateria = jTextFieldUnidadeMateriaPrima.getText();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "MATERIA_PRIMA";
            sql = "INSERT INTO " + nomeTabela + "(NOME,DESCRISAO,UNIDADE)" + " values(" + "'" + nomeMateria + "'" + "," + "'" + descricaoMateria + "'" + "," + "'" + unidadeMateria + "'" + ")";


            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Nova Materia Adiccionada Com Sucesso !");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        System.out.println("\n*** INSERIR NOVA MATERIA PRIMA");
        System.out.println("NOME: " + nomeMateria);
        System.out.println("OBSERVAÇÃO: " + descricaoMateria);
        System.out.println("UNIDADE: " + unidadeMateria);


    }

    private void InserirNovoFornecedor() {
        String nome = jTextFieldNomeFornecedor.getText();
        String morada = jTextFieldMoradaFornecedor.getText();
        String codPostal = jTextFieldCodPostalFornecedor.getText();
        String localidade = jTextFieldLocalidadeFornecedor.getText();
        String contacto = jTextFieldContactoFornecedor.getText();
        String email = jTextFieldEmailFornecedor.getText();
        String nif = jTextFieldNIFFornecedor.getText();
        String tipoProduto = jTextFieldTipoProdutoFornecedor.getText();



        //validarEmail(email);

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "FORNECEDOR";
            sql = "INSERT INTO " + nomeTabela + "(NOME, MORADA, COD_POSTAL, LOCALIDADE, CONTATO, EMAIL, NIF, TIPOPRODUTO)"
                    + " values(" + "'" + nome + "','" + morada + "','" + codPostal + "','" + localidade + "'," + contacto + ",'" + email + "'," + nif + ",'" + tipoProduto + "'" + ")";


            JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Nova Fornecedor Adicionado com Sucesso !");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        System.out.println("\n*** INSERIR NOVO FORNECEDOR");
        System.out.println("NOME: " + nome);
        System.out.println("MORADA: " + morada);
        System.out.println("CODPOSTAL: " + codPostal);
        System.out.println("LOCALIDADE: " + localidade);
        System.out.println("CONTACTO: " + contacto);
        System.out.println("EMAIL: " + email);
        System.out.println("NIF: " + nif);
        System.out.println("TIPOPRODUTO: " + tipoProduto);


    }

    private void InserirNovaEntrada() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd ", Locale.getDefault());

        String nomeFuncionario = jComboBoxFuncionarioResponsavelEntrada.getSelectedItem().toString();
        int idFuncionario = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

        String nomeFornecedor = jComboBoxFornecedorEntrada.getSelectedItem().toString();
        int idForncedor = selectId("FORNECEDOR", "NOME", nomeFornecedor, "IDFORNECEDOR");

        String nomeMateriaPrima = jComboBoxMateriaPrimaEntrada.getSelectedItem().toString();
        int idMateriaPrima = selectId("MATERIA_PRIMA", "NOME", nomeMateriaPrima, "IDMATERIAPRIMA");

        String dataEntrega = (String) sdf.format(jDateChooserEntrada.getDate());

        String lote = jTextFieldLoteEntrada.getText();
        float quantidade = Float.parseFloat(jTextFieldQuantidadeEntrada.getText().toString());
        String temperatura = jComboBoxTemperaturaEntrada.getSelectedItem().toString();
        String datavalidade = jComboBoxDataValidadeEntrada.getSelectedItem().toString();
        String caratOrgonolepricas = jComboBoxCaraOrgonolepticasEntradas.getSelectedItem().toString();
        String embalagem = jComboBoxEmbalagemEntradas.getSelectedItem().toString();
        String devolucao = "";
        float adevolver = 0.0f;
        
        devolucaoNumero = 0; //-- POR ESTE CAMINHO, ESTA VAI SER SEMPRE A PRIMEIRA DEVOLUÇÃO
       
        boolean gravarEntrada = false;
        
        boolean mostraJanela = false;
        
            
        //VRIFICAR O ESTADO DA DEVOLUÇÃO -> SIM OU NAO 
        if (temperatura.equals("NC") || datavalidade.equals("NC") || caratOrgonolepricas.equals("NC") || embalagem.equals("NC")) {
            devolucao = "S";
            jButtonGuardarNovaEntrada.setText("Guardar");
        } else {
            devolucao = "N";
            jButtonGuardarNovaEntrada.setText("Guardar");
        }


        if (devolucao.equals("N")) {
            //NAO VAI HAVER DEVOLUCAO
            jDialogNovaEntrada.setVisible(false);
            adevolver = 0.0f;
            gravarEntrada = true;
 
        } else {
            
            //MOSTRAR AVISO A DIZER PARA PREENCHER A QUANTIDADE KE TEM DE SER DEVOLVIDA!
          
            for (Component cp : jPanelADevolverNovaEntrada.getComponents()) 
            cp.setEnabled(true);
            
            
            for (Component cp : jPanelConformidadesNovaEntrada.getComponents()) 
            cp.setEnabled(false);
            
            for (Component cp : jPanelNovaEntrada.getComponents()) 
            cp.setEnabled(false);
            
            jButtonDesvloquearPanel.setVisible(true);
            
             adevolver = Float.parseFloat(jTextFieldQuantidadeADevolver.getText().toString());
             System.out.println("A DEVOLVER AGORA -> " + adevolver);
             
            if (adevolver > quantidade || adevolver == 0.0f) {

                if (mostraJanela == true) {
                    JOptionPane.showMessageDialog(jDialogNovaEntrada, "Quantidade A Devolver Maior que a Quantidade\n OU \nQuantidade a Devolver Igual a Zero !");
                }
                
                mostraJanela = true;
            } else {
                gravarEntrada = true;
                
                //ACTUALIZAMOS O VALOR DA QUANTIDADE PARA A QUANTIDADE REAL
                float quantidadeDesactualizada = quantidade;
                quantidade = quantidade - adevolver;
                JOptionPane.showMessageDialog(jDialogNovaEntrada, "Quantidade disponibel de Materia Prima!\n\n"
                                                        + "QUANTIDADE : " + quantidadeDesactualizada + "\n"
                                                        + "A DEVOLVER : " + adevolver + "\n"
                                                        + "DISPONIVEL : " + quantidade);
            }

        }
        
       
        
        if (gravarEntrada == true) {

            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "ENTRADA";
                sql = "INSERT INTO " + nomeTabela + "(IDFORNECEDOR, IDFUNCIONARIO, IDMATERIAPRIMA, DATAENTREGA, LOTEORIGEM, QUANTIDADE, TEMPERATURA, DATAVALIDADE, CARATORGONOLEPTICAS, EMBALAGEM, DEVOLUCAO, ADEVOLVER) "
                        + " values(" + idForncedor + "," + idFuncionario + "," + idMateriaPrima + ",'" + dataEntrega + "','" + lote + "'," + quantidade + ",'" + temperatura + "','" + datavalidade + "','" + caratOrgonolepricas + "','" + embalagem + "','" + devolucao + "'," + adevolver + ")";


                //JOptionPane.showMessageDialog(jDialogNovaMateriaPrima, "Nova Fornecedor Adicionado com Sucesso !");
                System.out.println("\n\n** DADOS DA NOVA ENTRADA INSERIDOS COM SUCESSO !");

                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
            
            jDialogNovaEntrada.setVisible(false);
            LimpaNovaEntrada();
            
           // FAZER PESQUISA PARA SABERMOS QUAL O IDENTRADA DA ENTRADA QUE 
           //ACABAMOS DE INSERIR VERIFCAMOS SE ESTAMOS A INSERIR NA BD
                
                try {
                    Class.forName("org.apache.derby.jdbc.ClientDriver");
                } catch (ClassNotFoundException e) {
                    System.err.print("ClassNotFoundException: ");
                    System.err.println(e.getMessage());
                    System.out.println("O driver expecificado nao foi encontrado.");
                }

                try {
                    idFornecedorDevolucao = idForncedor;
                    idMateriaPrimaDevolucao = idMateriaPrima;
                    quantidadeADevolverSelecionada = adevolver;
                    
                    con = DriverManager.getConnection(url);
                    String nomeTabela = "ENTRADA";
                    String sql = "SELECT * FROM " + nomeTabela + " WHERE IDFUNCIONARIO=" + idFuncionario
                            + " AND IDFORNECEDOR=" + idFornecedorDevolucao
                            + " AND IDMATERIAPRIMA=" + idMateriaPrimaDevolucao
                            + " AND LOTEORIGEM='" + lote + "'"
                            + " AND QUANTIDADE=" + quantidade
                            + " AND DEVOLUCAO='" + devolucao + "'";
                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    ResultSet rs = st.executeQuery();

                    while (rs.next()) {

                        idEntradaSeleccionada = rs.getInt("IDENTRADA");

                    }
                    //DEVOLUCAO NUMERO VAI SER SEMPRE 0, POR ESTE PERCURSO, POIS É A PRIMEIRA VEZ
                    //QUE ESTAMOS A FAZER A DEVOLUÇÃO
                    
                    devolucaoNumero = 0;
                    
                    
                    System.out.println("DADAOS PARA DEVOLUÇAO -> JANELA NOVA ENTRADAS");
                    System.out.println("ID ENTRADA -> " + idEntradaSeleccionada);
                    System.out.println("ID FORNECEDOR -> " + idFornecedorDevolucao);
                    System.out.println("ID MATERIA PRIMA -> " + idMateriaPrimaDevolucao);
                    System.out.println("QUANTIDADE A DEVOLVER -> " + quantidadeADevolverSelecionada);
                    System.out.println("DEVOLUÇAO NUMERO -> " + devolucaoNumero);
                    
                    //ABRIR JANELA DE DEVOLUÇOES
                    LimpaNovaDevolucao();
                    jDialogDevolucoes.setLocationRelativeTo(this);
                    jDialogDevolucoes.setVisible(true);
                    LerBDFuncionarioComboBoxDevolucao();
                    CalculaQuantoFaltaDevolver();                   
                    
                    st.close();
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }     
            }
              

        System.out.println("\n\n**BOTAO GUARDAR NOVA ENTRADA**");

        System.out.println("NOME FUNCIONARIO: " + nomeFuncionario);
        System.out.println("ID FUNCIONARIO : " + idFuncionario);

        System.out.println("NOME FORNECEDOR : " + nomeFornecedor);
        System.out.println("ID FORNECEDOR : " + idForncedor);

        System.out.println("MATERIA PRIMA : " + nomeMateriaPrima);
        System.out.println("ID PRIMA : " + idMateriaPrima);

        System.out.println("DTA ENTREGA : " + dataEntrega);
        System.out.println("LOTE : " + lote);
        System.out.println("QUANTIDADE : " + quantidade);
        System.out.println("TEMPERATURA : " + temperatura);
        System.out.println("DATA VALIDADE : " + datavalidade);
        System.out.println("CARAT. ORGONOLEPRICAS : " + caratOrgonolepricas);
        System.out.println("EMBALAGEM/TRANSPORTE : " + embalagem);
        System.out.println("VAI HAVER DEVOLUÇÃO : " + devolucao);
        System.out.println("QUANTIDADE A DEVOLVER : " + adevolver);
        

    }

    private void InserirDevolucao() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault());
                

        String dataDevolucao = (String) sdf.format(jDateChooserDataDevolucao.getDate());
        float quantidadeQueEstamosAdevolver = Float.parseFloat(jTextFieldQuantidadeDevolucao.getText().toString());
        String observacao = jTextAreaObservacoesDevolucao.getText();
        int idFuncionarioRresponsavel = 0;
        float quantidadeActualizar = 0.0f;
        String devolucao = "N";

        float quantidadeDevolvidadaAteAgora = 0.0f; //para ir buscar o valor a coluna e somar a de baixo
        float quantidadeDevolvidadaAteAgora_TOTAL = 0.0f; //somatorio das quantidades das devoluçoes ja efectuadas
        float quantidadeDevolvidadaAteAgora_FINAL = 0.0f; // esta e a soma das 2 -> _total + quantidadeQueEstamosAdevolver

        
        //COMBOBOX
        //FUNCIONARIO RESPONSAVEL PELA DEVOLUCAO

        String comboFuncio = jComboBoxFuncionarioResponsavelDevolucao.getSelectedItem().toString();
        
        if (comboFuncio.equals("--Funcionario--")) {

            JOptionPane.showMessageDialog(jDialogDevolucoes, "Selecione o Funcionario Responsavel");

        } else if (quantidadeQueEstamosAdevolver == 0.0) {

            //PERCORRER A BD E VER A QUANTIDADE QUE JA FOI DEVOLVIDA
            JOptionPane.showMessageDialog(jDialogDevolucoes, "Quantidade a Devolver não pode ser ZERO !");

        } else {

            //COMBO BOX DO FUNCIONARIO
            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "FUNCIONARIO";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE NOME='" + comboFuncio + "'";
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    idFuncionarioRresponsavel = rs.getInt("IDFUNCIONARIO");
                }
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }

            
            //BD DE DEVOLUÇÕES
            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "DEVOLUCOES";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE IDENTRADA=" + idEntradaSeleccionada;
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    quantidadeDevolvidadaAteAgora = rs.getFloat("QUANTIDADEDEVOLVIDA");
                    quantidadeDevolvidadaAteAgora_TOTAL = quantidadeDevolvidadaAteAgora_TOTAL + quantidadeDevolvidadaAteAgora;

                    System.out.println("quantidadeDevolvidaAteAgora : " + quantidadeDevolvidadaAteAgora);

                }
                System.out.println("\nquantidadeDevolvidaAteAgora_TOTAL : " + quantidadeDevolvidadaAteAgora_TOTAL);
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }

            //APAGAR
            mostraQuantidadeDevolvidaAteAoMomento = quantidadeDevolvidadaAteAgora_TOTAL;

            //VERIFICAR SE A QUANTIDADE JA DEVOLVIDA + A QUE VAMOS DEVOLVER ESTAO DENTRO DOS LIMITES
            quantidadeDevolvidadaAteAgora_FINAL = quantidadeDevolvidadaAteAgora_TOTAL + quantidadeQueEstamosAdevolver;
            System.out.println("CONTAS: " + quantidadeDevolvidadaAteAgora_TOTAL + " + " + quantidadeQueEstamosAdevolver + " = " + quantidadeDevolvidadaAteAgora_FINAL);

            //QUANTIDADE MAIOR
            if (quantidadeDevolvidadaAteAgora_FINAL > quantidadeADevolverSelecionada) {

                JOptionPane.showMessageDialog(jDialogDevolucoes, "Quantidade a devolvel nao pode ser tanta\nFALTA Devolver Apenas : " + (quantidadeADevolverSelecionada - quantidadeDevolvidadaAteAgora_TOTAL));

            } else if (quantidadeDevolvidadaAteAgora_FINAL == quantidadeADevolverSelecionada) {
                //QANTIDADE A DEVELVER = A DEVOLVIDA
                
                //inserir na mesma o registo mas actualizar o estado na tabela entradas
                try {
                    Class.forName("org.apache.derby.jdbc.ClientDriver");
                } catch (ClassNotFoundException e) { //driver não encontrado
                    System.err.print("ClassNotFoundException: ");
                    System.err.println(e.getMessage());
                    System.out.println("O driver expecificado nao foi encontrado.");
                }

                try {
                    con = DriverManager.getConnection(url);
                    String nomeTabela = "DEVOLUCOES";
                    sql = "INSERT INTO " + nomeTabela + "(IDFUNCIONARIO, IDFORNECEDOR, IDENTRADA, IDMATERIAPRIMA, DATADEVOLUCAO, QUANTIDADEDEVOLVIDA, OBSERVACAO)"
                            + " values(" + idFuncionarioRresponsavel + "," + idFornecedorDevolucao + "," + idEntradaSeleccionada + "," + idMateriaPrimaDevolucao + ",'" + dataDevolucao + "'," + quantidadeQueEstamosAdevolver + ",'" + observacao + "'" + ")";

                    System.out.println("\n\n** DADOS DA NOVA ENTRADA INSERIDOS COM SUCESSO !");

                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    st.executeUpdate();
                    st.close();

                    //VAMOS TER DE ACTUALIZAR O ESTADO DA DEVOLUÇÃO DE "SIM" PARA "NAO"
                    //VAMOS TER DE ACTUALUZAR O VALOR DE ADEVOLVER PARA 0
                    double aDevolter = 0.0;
                  
                    
                    String nomeTabela2 = "ENTRADA";
                    String sql2 = "UPDATE " + nomeTabela2 + " SET DEVOLUCAO='" + devolucao + "', ADEVOLVER="+ aDevolter +" WHERE IDENTRADA=" + idEntradaSeleccionada;
                    PreparedStatement st2 = (PreparedStatement) con.prepareStatement(sql2);
                    st2.executeUpdate();
                    st2.close();

                    JOptionPane.showMessageDialog(jDialogDevolucoes, "Estado da Devolução Actualizado com Sucesso.\nAgora : Devolvido");

                    jDialogDevolucoes.setVisible(false);
                    LimpaNovaDevolucao();
                    LimpaTabelaEntradas();
                    ConsultaEntradas();

                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }

            } else {

                //VER QUAL O NUMERO DA DEVOLUÇÃO QUE VAI TER -> DEVOLUCAONUMERO
                devolucaoNumero = devolucaoNumero + 1;

                //INSERIR O NOVO VALOR NA TABELA DEVOLUÇÕES
                try {
                    Class.forName("org.apache.derby.jdbc.ClientDriver");
                } catch (ClassNotFoundException e) { //driver não encontrado
                    System.err.print("ClassNotFoundException: ");
                    System.err.println(e.getMessage());
                    System.out.println("O driver expecificado nao foi encontrado.");
                }
                
                try {
                    con = DriverManager.getConnection(url);
                    String nomeTabela = "DEVOLUCOES";
                    sql = "INSERT INTO " + nomeTabela + "(IDFUNCIONARIO, IDFORNECEDOR, IDENTRADA, IDMATERIAPRIMA, DATADEVOLUCAO, QUANTIDADEDEVOLVIDA, OBSERVACAO, DEVOLUCAONUMERO)"
                            + " values(" + idFuncionarioRresponsavel + "," + idFornecedorDevolucao + "," + idEntradaSeleccionada + "," + idMateriaPrimaDevolucao + ",'" + dataDevolucao + "'," + quantidadeQueEstamosAdevolver + ",'" + observacao + "'," + devolucaoNumero + ")";

                    System.out.println("\n\n** DADOS DA NOVA DEVOLUÇÃO INSERIDOS COM SUCESSO !");

                        //ACTUALIZAR A TABELA ENTRADAS VALOR ADEVOLVER
                        //FAZER A CONTA PARA ACTUALIZAR
                        quantidadeActualizar = quantidadeADevolverSelecionada - quantidadeQueEstamosAdevolver;
                        
                        String nomeTabela2 = "ENTRADA";
                        String sql2 = "UPDATE " + nomeTabela2 + " SET ADEVOLVER="+ quantidadeActualizar +" WHERE IDENTRADA=" + idEntradaSeleccionada;
                        PreparedStatement st2 = (PreparedStatement) con.prepareStatement(sql2);
                        st2.executeUpdate();
                        st2.close();       
                        
                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    st.executeUpdate();
                    st.close();

                    jDialogDevolucoes.setVisible(false);
                    LimpaNovaDevolucao();
                    LimpaTabelaEntradas();
                    ConsultaEntradas();

                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }             
               
               
            }
        }

        System.out.println("\n\n** BOTAO GUARDAR DEVOLUCAO");
        System.out.println("ID FUNCIONARIO : " + idFuncionarioRresponsavel);
        System.out.println("ID FORNECEDOR: " + idFornecedorDevolucao);
        System.out.println("ID MMAT. PRIMA: " + idMateriaPrimaDevolucao);
        System.out.println("ID ENTRADA: " + idEntradaSeleccionada);
        System.out.println("QUANT. DEVOLVIDA: " + quantidadeQueEstamosAdevolver);
        System.out.println("DATA DEVOL: " + dataDevolucao);
        System.out.println("DESCRICAO: " + observacao);
        System.out.println("DEVOLUÇÃO NUMERO: " + devolucaoNumero);
        
        System.out.println("\n\nQUANTIDADE ADEVOLVER ACTUAÇIZADA : " + quantidadeActualizar);

    }

   
   
    /*  PESQUISAR   */
    private void PesquisaEntrada() {
        String pesquisaEntrada = jTextFieldPesquisarEntrada.getText();


        int idFuncionario = 0;
        String nomeFuncionario = "";

        int idFornecedor = 0;
        String nomeFornecedor = "";

        int idMateriaPrima = 0;
        String nomeMateriaPrima = "";

        String dataEntrega = "";
        String loteOrigem = "";
        String peso = "";
        String temperatura = "";
        String dataValidade = "";
        String caraOrgonolept = "";
        String embalagem = "";
        String devolucao = "";

        model = (DefaultTableModel) jTableConsultaEntradas.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }


        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "ENTRADA";
            sql = "select * from " + nomeTabela + " where LOTEORIGEM like '" + pesquisaEntrada + "%'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                idFornecedor = rs.getInt("IDFORNECEDOR");
                nomeFornecedor = selectString("FORNECEDOR", "IDFORNECEDOR", idFornecedor, "NOME");

                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");

                idMateriaPrima = rs.getInt("IDMATERIAPRIMA");
                nomeMateriaPrima = selectString("MATERIA_PRIMA", "IDMATERIAPRIMA", idMateriaPrima, "NOME");

                dataEntrega = rs.getString("DATAENTREGA");
                loteOrigem = rs.getString("LOTEORIGEM");
                peso = rs.getString("QUANTIDADE");
                temperatura = rs.getString("TEMPERATURA");
                dataValidade = rs.getString("DATAVALIDADE");
                caraOrgonolept = rs.getString("CARATORGONOLEPTICAS");
                embalagem = rs.getString("EMBALAGEM");
                devolucao = rs.getString("DEVOLUCAO");


                if (devolucao.equals("S")) {
                    devolucao = "Sim";
                } else {
                    devolucao = "Não";
                }

                model.addRow(new Object[]{nomeFuncionario, nomeFornecedor, nomeMateriaPrima, dataEntrega, loteOrigem, peso, devolucao});
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }



    }

    
    /*  CALCULOS    */
    
    private void CalculaQuantoFaltaDevolver(){
        //VAMOS A TABELA DEVOLUÇOES E VEMOS O VALOR QUE FALTA
        
         float quantidadeDevolvidadaAteAgora  = 0.0f; //para ir buscar o valor a coluna e somar a de baixo
         float quantidadeDevolvidadaAteAgora_TOTAL = 0.0f; //somatorio das quantidades das devoluçoes ja efectuadas
         float quantidadeDevolvidadaAteAgora_FINAL = 0.0f; // esta e a soma das 2 -> _total + quantidadeQueEstamosAdevolver
        
         devolucaoNumero = 0; //inciar
         
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "DEVOLUCOES";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE IDENTRADA=" + idEntradaSeleccionada ;
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    quantidadeDevolvidadaAteAgora = rs.getFloat("QUANTIDADEDEVOLVIDA");
                    quantidadeDevolvidadaAteAgora_TOTAL = quantidadeDevolvidadaAteAgora_TOTAL + quantidadeDevolvidadaAteAgora;
                    
                    devolucaoNumero++;
                    
                    //PERCURRER TODOS OS CAMPOS DA BD
                    System.out.println("quantidadeDevolvidaAteAgora : " + quantidadeDevolvidadaAteAgora);
                    System.out.println("devolucoesNumero : " + devolucaoNumero);
                    
                    
                }
                System.out.println("\nquantidadeDevolvidaAteAgora_TOTAL : " + quantidadeDevolvidadaAteAgora_TOTAL );
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
    
  
         jTextFieldQuantidadeADevolverDevolucao.setText(String.valueOf(quantidadeADevolverSelecionada -quantidadeDevolvidadaAteAgora_TOTAL));
    
    }
    
   private void CalculaQuatidadeLoteTotalEntrada(){
        
       int idEntrada = 0;
       int quantidade = 0;
       int adevolver = 0;
       float quantidadeTotal = 0;
       String loteOrigem = "";
       
       float quantidadeDevolvida = 0;
       float quantidadeDevolvidaTotal = 0;
       
       // TABLA ENTRADAS BUSCAS A QUANTIDADE DE MT E A QUANTIDADE A DEVOLVER(actualizada)
       try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "ENTRADA";
                String sql = "SELECT * FROM " + nomeTabela + " WHERE LOTEORIGEM= '" + LoteOriginalSeleccionado + "'";
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    idEntrada = rs.getInt("IDENTRADA");
                    quantidade = rs.getInt("QUANTIDADE");
                    adevolver = rs.getInt("ADEVOLVER");
                  //  loteOrigem = rs.getString("LOTEORIGEM");
                }                
            
                        //PERCORERR A TABELA DEVOLUÇÕES PARA SABERMOS A QUANTIDADE DE MT JA DEVOLVIDA
                        Connection con2 = DriverManager.getConnection(url);
                        String nomeTabela2 = "DEVOLUCOES";
                        String sql2 = "SELECT * FROM " + nomeTabela2 + " WHERE IDENTRADA= " + idEntrada ;
                        PreparedStatement st2 = (PreparedStatement) con2.prepareStatement(sql2);
                        ResultSet rs2 = st2.executeQuery();
                        while(rs2.next()){
                            quantidadeDevolvida = rs2.getFloat("QUANTIDADEDEVOLVIDA");
                            System.out.println("QUANTIDADE DEVOLVIDA : " + quantidadeDevolvida);
                            quantidadeDevolvidaTotal = quantidadeDevolvidaTotal + quantidadeDevolvida;
                            
                        }
                        System.out.println("QUANTIDADE DEVOLVIDA TOTAL: " + quantidadeDevolvidaTotal);
                        st2.close(); 
                        con2.close();
                
                
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
            
            quantidadeTotal = quantidade + adevolver + quantidadeDevolvidaTotal;
           
//            
            JOptionPane.showMessageDialog(jDialogConsultaEntradas, "CALCULO :\n"
                    + "Qtd Disponivel : " + quantidade +"\n"
                    + "Qtd a Devolver : " + adevolver + "\n"
                    + "Qtd já Devolvida : " + quantidadeDevolvidaTotal + "\n\n"
                    + "Quantidade que deu Entrada (S/Devoluções) :\n"
                    + "--> " + quantidadeTotal);
//            
            
            System.out.println("IDENTRADA : " + idEntrada);
            System.out.println("QUANTIDADE : " +quantidade);
            System.out.println("ADEVOLVER : " + adevolver);
            System.out.println("QUANTIDADE TOTAL : " + quantidadeTotal);
           // System.out.println("LOTE ORIG : " + loteOrigem);
             System.out.println("QUANTIDADE TOTAL DE MATERIA PRIMA :  " + quantidadeTotal);
   }
    
    
    /*  VALIDACOES E GERAR  */
    public static boolean validarEmail(String email) {
        boolean isEmailIdValid = false;
        if (email != null && email.length() > 0) {
            String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
            Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(email);
            if (matcher.matches()) {
                isEmailIdValid = true;
                System.out.println("\nEmail Valido");
            } else {
                System.out.println("\nEmail Invalido");
            }
        }
        return isEmailIdValid;
    }

    public static boolean validarNif(String number) {
        // TAMANHO OBRIGATORIO TEM DE SER 9
        if (number.length() != 9) {
            return false;

        } //else if (number.equals("123456789")) {
            //return false;
        //}
       
        
        // TEM DE COMERÇAR COM 1, 2, 5, 6, 7, 8 ou 9
        if (!"1256789".contains(number.charAt(0) + "")) {
            return false;
        }

        // CICLO PARA CONSTRUIR O ARRAY DE INTEIROS
        int[] numbers = new int[9];
        for (int i = 0; i < 9; i++) {
            numbers[i] = Integer.parseInt(number.charAt(i) + "");
        }

        //FAZER AS CONTAS
        float resultado = 0.0f;
        for (int i = 0, j = 9; i < 9; i++, j--) {
            resultado += (j * numbers[i]);
            System.out.println(resultado + " = " + j + " x " + numbers[i]);
        }

        if ((resultado % 11) != 0.0f) {
            return false;
        } else {
            return true;
        }

        /*
         *  http://www.dgaiec.min-financas.pt/pt/informacao_aduaneira/eori/
         * 
         * http://pt.wikipedia.org/wiki/N%C3%BAmero_de_identifica%C3%A7%C3%A3o_fiscal
         * http://raul252.blogspot.pt/2013/05/que-lo-sepas-validar-nif-nif-cif.html
         * http://amatellanes.wordpress.com/2013/07/30/java-validar-dni-nie-o-cif-en-java/
         * 
         */


    }

    private void GeraLote(){
        Date dataAtual = new Date();    
        DateFormat formato = new SimpleDateFormat("yyyyMMddHHmmss");  
        String formatodData = formato.format(dataAtual);
        System.out.println("\n " + formatodData );
        
        String LoteComExtencao = "LT"+formatodData;
        
        geraLote = LoteComExtencao;
        
        //IR A BASE DE DADOS VERIFICAR SE JA EXISTE ALGUM LOTE COM ESTA COMBINAÇÃO
        
        
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        
        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "ENTRADA";
            String sql = "SELECT * FROM " + nomeTabela + " WHERE LOTE="+geraLote;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            System.out.println("LOTE JA EXISTE");
            
            st.close();
            con.close();
        } catch (SQLException ex) {
            
            System.out.println("LOTE NAO EXISTE");
        }

        
        
        
    }
    
    
    /* LIMPAR */
    private void LimpaNovaMateriaPrima() {
        jTextFieldNomeMateriaPrima.setText("");
        jTextAreaDescricaoMateriaPrima.setText("");
        jTextFieldUnidadeMateriaPrima.setText("");
    }

    private void LimpaNovoFornecedor() {
        jTextFieldNomeFornecedor.setText("");
        jTextFieldMoradaFornecedor.setText("");
        jTextFieldCodPostalFornecedor.setText("");
        jTextFieldLocalidadeFornecedor.setText("");
        jTextFieldContactoFornecedor.setText("");
        jTextFieldEmailFornecedor.setText("");
        jTextFieldNIFFornecedor.setText("");
        jTextFieldTipoProdutoFornecedor.setText("");
    }

    private void LimpaNovaDevolucao() {
        jTextFieldQuantidadeDevolucao.setText("0.0");
        jTextAreaObservacoesDevolucao.setText("");
    }
    
    private void LimpaNovaEntrada(){
        jTextFieldLoteEntrada.setText("");
        jTextFieldQuantidadeEntrada.setText("");
        jTextFieldQuantidadeADevolver.setText("");
    }

    private void LimpaTabelaEntradas() {
        DefaultTableModel model = (DefaultTableModel) jTableConsultaEntradas.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }

    private void LimpaTabelaControloResultados() {
        DefaultTableModel model = (DefaultTableModel) jTableConsultaControloResultadosEntradas.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }

    private void LimpaTabelaNaoConformidades() {
        DefaultTableModel model = (DefaultTableModel) jTableConsultaNaoConformidadesEntradas.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }

    private void LimpaTabelaConsultaDevolucoes() {
        DefaultTableModel model = (DefaultTableModel) jTableConsultaDevolucoes.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }

   
    
    
    /*   FUNÇAO PARA LER OS CAMPO DE UMA TABELAS */
    private int selectId(String tab, String col, String cam, String colId) {
        int resultId = 0;
        String tabela = tab;
        String coluna = col;
        String campo = cam;
        String colunaId = colId;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "='" + campo + "'";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultId = rs.getInt(colunaId);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        return resultId;
    }

    private String selectString(String tab, String col, int cam, String colNome) {
        String resultString = "";
        String tabela = tab;
        String coluna = col;
        int campo = cam;
        String colunaNome = colNome;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "=" + campo + " ";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultString = rs.getString(colunaNome);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        return resultString;
    }


    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Entradas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonConsultaDevolucoes;
    private javax.swing.JButton jButtonConsultaDevolucoesSair;
    private javax.swing.JButton jButtonConsultaEntradas;
    private javax.swing.JButton jButtonConsultaEntradasSair;
    private javax.swing.JButton jButtonConsutaControloResultadosEntradasSair;
    private javax.swing.JButton jButtonDesvloquearPanel;
    private javax.swing.JButton jButtonDevolucao;
    private javax.swing.JButton jButtonEntrar;
    private javax.swing.JButton jButtonGuardaDevolucao;
    private javax.swing.JButton jButtonGuardarMateriaPrima;
    private javax.swing.JButton jButtonGuardarNovaEntrada;
    private javax.swing.JButton jButtonGuardarNovoFornecedor;
    private javax.swing.JButton jButtonNovaEntrada;
    private javax.swing.JButton jButtonNovaMateriaPrima;
    private javax.swing.JButton jButtonNovoForncedor;
    private javax.swing.JButton jButtonSairDevolucao;
    private javax.swing.JButton jButtonSairMateriaPrima;
    private javax.swing.JButton jButtonSairNovaEntrada;
    private javax.swing.JButton jButtonSairNovoFornecedor;
    private javax.swing.JButton jButtonVerControloResultados;
    private javax.swing.JButton jButtonVerDevolucoes;
    private javax.swing.JButton jButtonVerFichaCompletaControloResultados;
    private javax.swing.JButton jButtonVerFichaDetalhadaConsultaDevolucoes;
    private javax.swing.JButton jButtonVerLoteTotal;
    private javax.swing.JButton jButtonVerNaoConformidadesEntradas;
    private javax.swing.JButton jButtonVerTodasAsDevolucoes;
    private javax.swing.JComboBox jComboBoxCaraOrgonolepticasEntradas;
    private javax.swing.JComboBox jComboBoxDataValidadeEntrada;
    private javax.swing.JComboBox jComboBoxEmbalagemEntradas;
    private javax.swing.JComboBox jComboBoxFornecedorDevolucoes;
    private javax.swing.JComboBox jComboBoxFornecedorEntrada;
    private javax.swing.JComboBox jComboBoxFuncionarioResponsavelDevolucao;
    private javax.swing.JComboBox jComboBoxFuncionarioResponsavelEntrada;
    private javax.swing.JComboBox jComboBoxMateriaPrimaDevolucoes;
    private javax.swing.JComboBox jComboBoxMateriaPrimaEntrada;
    private javax.swing.JComboBox jComboBoxTemperaturaEntrada;
    private com.toedter.calendar.JDateChooser jDateChooserDataDevolucao;
    private com.toedter.calendar.JDateChooser jDateChooserEntrada;
    private javax.swing.JDialog jDialogConsultaControloResultadosEntradas;
    private javax.swing.JDialog jDialogConsultaDevolucoes;
    private javax.swing.JDialog jDialogConsultaEntradas;
    private javax.swing.JDialog jDialogConsultaNaoConformidadesEntradas;
    private javax.swing.JDialog jDialogDevolucoes;
    private javax.swing.JDialog jDialogMenuEntradas;
    private javax.swing.JDialog jDialogNovaEntrada;
    private javax.swing.JDialog jDialogNovaMateriaPrima;
    private javax.swing.JDialog jDialogNovoFornecedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCodPostalFornecedor;
    private javax.swing.JLabel jLabelContactoForncedor;
    private javax.swing.JLabel jLabelDataDevolucao;
    private javax.swing.JLabel jLabelDescricaoMateriaPrima;
    private javax.swing.JLabel jLabelEmailFornecedor;
    private javax.swing.JLabel jLabelFornecedorDevolucoes;
    private javax.swing.JLabel jLabelFuncionarioResponsavel;
    private javax.swing.JLabel jLabelLocalidadeForncedor;
    private javax.swing.JLabel jLabelMateriaPrimaDevolucoes;
    private javax.swing.JLabel jLabelMoradaFornecedor;
    private javax.swing.JLabel jLabelNIFFornecedor;
    private javax.swing.JLabel jLabelNomeFornecedor;
    private javax.swing.JLabel jLabelNomeMateriaPrima;
    private javax.swing.JLabel jLabelNovoFornecedor;
    private javax.swing.JLabel jLabelObservação;
    private javax.swing.JLabel jLabelPesquisar;
    private javax.swing.JLabel jLabelQuantidadeADevolver;
    private javax.swing.JLabel jLabelQuantidadeADevolverDevolucao;
    private javax.swing.JLabel jLabelQuantidadeDevolvida;
    private javax.swing.JLabel jLabelTipoProduto;
    private javax.swing.JLabel jLabelTituloConsultaEntradas;
    private javax.swing.JLabel jLabelUnidadeMateriaPrima;
    private javax.swing.JPanel jPanelADevolverNovaEntrada;
    private javax.swing.JPanel jPanelBotoesNovaEntrada;
    private javax.swing.JPanel jPanelConformidadesNovaEntrada;
    private javax.swing.JPanel jPanelConsultaControloResultadosEntradas;
    private javax.swing.JPanel jPanelConsultaDevolucoes;
    private javax.swing.JPanel jPanelConsultaEntradas;
    private javax.swing.JPanel jPanelConsultaNaoConformidadesEntradas;
    private javax.swing.JPanel jPanelDevolucoes;
    private javax.swing.JPanel jPanelMenuEntradas;
    private javax.swing.JPanel jPanelNovaEntrada;
    private javax.swing.JPanel jPanelNovaMateriaPrima;
    private javax.swing.JPanel jPanelNovoFornecedor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneConsultaNaoConformidades;
    private javax.swing.JScrollPane jScrollPaneDescricaoMateriaPrima;
    private javax.swing.JScrollPane jScrollPaneObservacoesDevolucao;
    private javax.swing.JTable jTableConsultaControloResultadosEntradas;
    private javax.swing.JTable jTableConsultaDevolucoes;
    private javax.swing.JTable jTableConsultaEntradas;
    private javax.swing.JTable jTableConsultaNaoConformidadesEntradas;
    private javax.swing.JTextArea jTextAreaDescricaoMateriaPrima;
    private javax.swing.JTextArea jTextAreaObservacoesDevolucao;
    private javax.swing.JTextField jTextFieldCodPostalFornecedor;
    private javax.swing.JTextField jTextFieldContactoFornecedor;
    private javax.swing.JTextField jTextFieldEmailFornecedor;
    private javax.swing.JTextField jTextFieldLocalidadeFornecedor;
    private javax.swing.JTextField jTextFieldLoteEntrada;
    private javax.swing.JTextField jTextFieldMoradaFornecedor;
    private javax.swing.JTextField jTextFieldNIFFornecedor;
    private javax.swing.JTextField jTextFieldNomeFornecedor;
    private javax.swing.JTextField jTextFieldNomeMateriaPrima;
    private javax.swing.JTextField jTextFieldPesquisarEntrada;
    private javax.swing.JTextField jTextFieldQuantidadeADevolver;
    private javax.swing.JTextField jTextFieldQuantidadeADevolverDevolucao;
    private javax.swing.JTextField jTextFieldQuantidadeDevolucao;
    private javax.swing.JTextField jTextFieldQuantidadeEntrada;
    private javax.swing.JTextField jTextFieldTipoProdutoFornecedor;
    private javax.swing.JTextField jTextFieldUnidadeMateriaPrima;
    // End of variables declaration//GEN-END:variables
}
